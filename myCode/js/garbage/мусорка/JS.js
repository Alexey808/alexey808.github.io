http://javascript.ru/manual

===СОДЕРЖАНИЕ===

Стандартные объекты

    Array - Массив пронумерованных элементов, также может служить стеком или очередью
    Boolean - Объект для булевых значений
    Date - Функции для работы с датой и временем
    Error - объект для представления ошибок
    EvalError - Ошибка при выполнении функции eval
    Function - Каждая функция в яваскрипт является объектом класса Function.
    Math - Встроенный объект, предоставляющий константы и методы для математических вычислений.
    Number - Объект для работы с числами
    Object - Базовый объект javascript
    RangeError - Ошибка, когда число не лежит в нужном диапазоне
    ReferenceError - Ошибку при ссылке на несуществующую переменную
    RegExp - Позволяет работать с регулярными выражениями.
    String - Базовый объект для строк. Позволяет управлять текстовыми строками, форматировать их и выполнять поиск подстрок.
    SyntaxError - Ошибка при интерпретации синтаксически неверного кода
    TypeError - Ошибка в типе значения
    URIError - Ошибка при некорректном URI

Объекты браузера

    window - Два в одном: глобальный объект и окно браузера

Глобальные методы

    alert - Выводит модальное окно с сообщением
    clearInterval - Останавливает выполнение кода, заданное setInterval
    clearTimeout - Отменяет выполнение кода, заданное setTimeout
    confirm - Выводит сообщение в окне с двумя кнопками: "ОК" и "ОТМЕНА" и возвращает выбор посетителя
    decodeURI - Раскодирует URI, закодированный при помощи encodeURI
    decodeURIComponent - Раскодирует URI, закодированный при помощи encodeURIComponent
    encodeURI - Кодирует URI, заменяя каждое вхождение определенных символов на escape-последовательности, представляющие символ в кодировке UTF-8.
    encodeURIComponent - Кодирует компоненту URI, заменяя определенные символы на соответствующие UTF-8 escape-последовательности
    eval - Выполняет строку javascript-кода без привязки к конкретному объекту.
    isFinite - возвращает, является ли аргумент конечным числом
    isNaN - Проверяет, является ли аргумент NaN
    parseFloat - преобразует строковой аргумент в число с плавающей точкой
    parseInt - преобразует строковой аргумент в целое число нужной системы счисления
    prompt - Выводит окно с указанным текстом и полем для пользовательского ввода.
    setInterval - Выполняет код или функцию через указанный интервал времени
    setTimeout - Выполняет код или функцию после указанной задержки

Глобальные свойства

    arguments - Переменная, доступная внутри функции и содержащая аргументы и ссылку на саму функцию.
    document - Отвечает за взаимодействие JavaScript с объектом документа(страницей)
    	Является корневым элементом DOM-дерева страницы (объект типа DOMDocument согласно спецификации DOM)
    Infinity - Бесконечность
    NaN - Не-Числовое значение
    undefined - Обозначает неопределенное значение

Синтаксические конструкции

	break - Завершает текущий цикл или конструкции switch и label и передает управление на следующий вызов
    continue - Прекращает текущую итерацию цикла и продолжает выполнение со следующей итерации
    do..while - Задает цикл с проверкой условия после каждой итерации
    for - Создать цикл, указав начальное состояние, условие и операцию обновления состояния
    for..in - Перебрать свойства объекта, для каждого свойства выполнить заданный код
    function - Объявить функцию
    if - Выполняет тот или иной блок кода в зависимости от того, верно ли условие
    label - Указать идентификатор для использования в break и continue
    return - Возвратить результат работы функции
    switch - Сравнивает значение выражения с различными вариантами и при совпадении выполняет соответствующий код
    throw - Инициировать("бросить") исключение
    try..catch - Ловить все исключения, выпадающие из блока кода
    var - Объявить переменную (или несколько) в текущей области видимости
    while - Задает цикл, который выполняется до тех пор, пока условие верно. Условие проверяется перед каждой итерацией.
    with - Добавить новую область видимости
    Блок - Группировка javascript-вызовов внутри фигурных скобок

Операторы
	
	delete
	function
	in
	instanceof
	new
	this
	typeof
	void


+-------------------------------------------+
|   Проверка знаний JS                      |
+-------------------------------------------+
|   Write the result of these expressions:  |
|   6 / «3»                                 |
|   «2» * «3»                               |
|   4 + 5 + «4px»                           |
|   «$» + 4 + 5                             |
|   «4» — 2                                 |
|   «4px» — 2                               |
|   7 / 0                                   |
|   typeof null                             |
|   typeof {}[0]                            |
|   typeof («4px» — 2)                      |
|   parseInt(«09»)                          |
|   5 && 2                                  |
|   2 && 5                                  |
|   5 || 0                                  |
|   0 || 5                                  |
+-------------------------------------------+
|   * метка, где я допустил ошибки          |
|   "" + 1 + 0          "10"                |
|   "" - 1 + 0          -1                  |
|   true + false        1           *       |
|   6 / "3"             2                   |
|   "2" * "3"           6                   |
|   4 + 5 + "px"        "9px"       *       |
|   "$" + 4 + 5         "$45"               |
|   "4" - 2             2                   |
|   "4px" - 2           NaN                 |
|   7 / 0               Infinity            |
|   "  -9\n" + 5        " -9\n5"    *       |
|   "  -9\n" - 5        -14         *       |
|   5 && 2              2                   |
|   2 && 5              5                   |
|   5 || 0              5                   |
|   0 || 5              5                   |
|   null + 1            1           *       |
|   undefined + 1       NaN         *       |
|   null == "\n0\n"     false               |
|   +null == +"\n0\n"   true                |          
+-------------------------------------------+

+-----------------------------------------------------------------------+
|   Побитовые Операторы                                                 |
+-----------------------------------------------------------------------+
|   AND(и) ( & )                                                        |
|   OR(или) ( | )                                                       |
|   XOR(побитовое исключающее или) ( ^ )                                |
|   NOT(не) ( ~ )                                                       |
|   LEFT SHIFT(левый сдвиг) ( << )                                      |
|   RIGHT SHIFT(правый сдвиг) ( >> )                                    |
|   ZERO-FILL RIGHT SHIFT(правый сдвиг с заполнением нулями) ( >>> )    |
+-----------------------------------------------------------------------+

+-----------------------------------------------------------------------+
|   Логическое преобразование                                           |
+-----------------------------------------------------------------------+
|   Значение            Преобразуется в...                              |
|   undefined, null     false                                           |
|   Числа               Все true, кроме 0, NaN -- false.                |
|   Строки              Все true, кроме пустой строки "" -- false       |
|   Объекты             Всегда true                                     |
+-----------------------------------------------------------------------+

!Ни счётчик ни реклама не должны загружатся до начала блока боди, чтобы не тормазить ими сайт.
!JS автоматически не ставит ; перед [ скобкой. Рекомендуется самому раставлять все ;
!Особенность бинарного оператора (число+строка)=строка. Если хотя бы один аргумент является строкой, то второй будет также преобразован к строке!
!для поддержки ES5 в IE можно подключить библиотеку  ES5 shim а именно скрипты es5-shim.js и es5-sham.js
!Директива use strict (строгий режим) позволяет использовать код по новым стандартам. Подключается вначале скрипта кодом "use strict";
!Есть 5 «примитивных» типов: number, string, boolean, null, undefined и 6-й тип – объекты object.
!Унарный + преобразует строку в число (var a="2",b="3";alert(+a + +b); вывод 5)
!Значение undefined вообще нельзя сравнивать
!Значения разных типов приводятся к числу при сравнении, за исключением строгого равенства === (!==).
!При преобразовании в число null становится 0, а undefined становится NaN.
!null и undefined. Они равны друг другу, но не равны чему бы то ни было ещё, этот случай прописан особо в спецификации.
!Принцип дополнения до двойки делит все двоичные представления на два множества: если крайний-левый бит равен 0 – число положительное, если 1 – число отрицательное. Поэтому этот бит называется знаковым битом.
!~ (Побитовое НЕ) Из-за внутреннего представления отрицательных чисел получается так, что ~n == -(n+1).
!Обычно число в JavaScript имеет 64-битный формат с плавающей точкой. При этом часть битов (52) отведены под цифры, часть (11) отведены под хранение номера позиции, на которой стоит десятичная точка, и один бит – знак числа.
!Итак, оператор || вычисляет операнды слева направо до первого «истинного» и возвращает его, а если все ложные – то последнее значение.
!Итак, оператор && вычисляет операнды слева направо до первого «ложного» и возвращает его, а если все истинные – то последнее значение.
!двойное НЕ  (!!"строка" = true или !!null = false)используют для преобразования значений к логическому типу
!Для более очевидной работы кода и во избежание ошибок лучше не давать специальным значениям участвовать в сравнениях > >= < <=.
!Для явного преобразования используется двойное логическое отрицание !!value или вызов Boolean(value).
!Два значения могут быть равны, но одно из них в логическом контексте true, другое – false.
!сочетание «бесконечный цикл + break» – отличная штука для тех ситуаций, когда условие, по которому нужно прерваться, находится не в начале-конце цикла, а посередине.

--- Словарик ---
Процесс выполнения скрипта называют «интерпретацией»
Апплет в Jave – это программа на языке Java, которую можно подключить к HTML при помощи тега applet
Спецификация – это самый главный, определяющий документ, в котором написано, как себя ведёт JavaScript, браузер, CSS и т.п.
«Фолдинг» (от англ. folding) – возможность скрыть-раскрыть блок кода.
Операнд – то, к чему применяется оператор.
Унарным называется оператор, который применяется к одному выражению. 
Бинарным называется оператор, который применяется к двум операндам.
конкатенацию - сложение строк
«модальное» означает, что посетитель не может взаимодействовать со страницей, нажимать другие кнопки и т.п., пока не разберётся с окном.
итерация - по научному это повторение цикла, если цикл повторяется 3 раза то и будет 3 итерации.
--- Операторы ---
   var - объявление переменных и констант.
   typeof x  - позволяет выяснить, какой тип находится в x, возвращая его в виде строки.


--- Ключевые слова ---
async и defer
--- Директивы ---
use strict
break
continue

---Особые случаи сравнения---
alert( null > 0 ); // false
alert( null == 0 ); // false
alert(null >= 0); // true!
-
alert( undefined == 0 ); // false! Значение undefined вообще нельзя сравнивать


--- Функции ---
parseInt("11000", 2) - переводит двоичное число в десятичное
n.toString(2) - получает для числа n запись в 2-ной системе в виде строки.



--- Список операторов ---
Оператор                            Использование   Описание
Побитовое И (AND)                   a & b           Ставит 1 на бит результата, для которого соответствующие биты операндов равны 1.
Побитовое ИЛИ (OR)                  a | b           Ставит 1 на бит результата, для которого хотя бы один из соответствующих битов операндов равен 1.
Побитовое исключающее ИЛИ (XOR)     a ^ b           Ставит 1 на бит результата, для которого только один из соответствующих битов операндов равен 1 (но не оба).
Побитовое НЕ (NOT)                  ~a              Заменяет каждый бит операнда на противоположный.
Левый сдвиг                         `a << b`        Сдвигает двоичное представление a на b битов влево, добавляя справа нули.
Правый сдвиг, переносящий знак      `a >> b`        Сдвигает двоичное представление a на b битов вправо, отбрасывая сдвигаемые биты.
Правый сдвиг с заполнением нулями   `a >>> b`       Сдвигает двоичное представление a на b битов вправо, отбрасывая сдвигаемые биты и добавляя нули слева.
---



Бинарные побитовые операторы: & | ^ << >> >>>.
Унарный побитовый оператор один: ~.
Как правило, битовое представление числа используется для:
Округления числа: (12.34^0) = 12.
Проверки на равенство -1: if (~n) { n не -1 }.
Упаковки нескольких битововых значений («флагов») в одно значение. Это экономит память и позволяет проверять наличие комбинации флагов одним оператором &.


--- Модальные окна, синтакс ---
alert(сообщение) //простое сообщение
result = prompt(title, default); //сообщение с полем ввода текста, клавиши "ок" и "отмена"
result = confirm(question); //сообщение с текстом, клавиши "ок" и "отмена"

--- Циклы, синтакс ---
while (условие) { код, тело цикла }
do { тело цикла } while (условие);
for (начало; условие; шаг) {... тело цикла ...}

--- Сравнения, синтакс ---
switch(x) {
  case 'value1':  // if (x === 'value1')
    ...
    [break]
  case 'value2':  // if (x === 'value2')
    ...
    [break]
  default:
    ...
    [break]
}

--- Функции, синтакс ---
function имя(параметры, через, запятую) {
  код функции
}

