===СОДЕРЖАНИЕ===

Стандартные объекты

> Array - Массив пронумерованных элементов, также может служить стеком или очередью
	> Создание
 		var arr = []
 	> Методы
		push 	- добавление элемента в конец массива.
		shift - Удаляет элемент с индексом 0 и сдвигает остальные элементы на один вниз. 
		join - разделение массива.
		concat - возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.
			Синтакс: var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])
		pop -
		unshift -
		slice -
		reverse -
		sort -
		splice -
		Array.isArray - проверка на массив. Возвращает true если массив, иначе false.
	> Свойства
		index -
		input -
		length -
  > Boolean - Объект для булевых значений
   	> Создание
  		b = new Boolean(value)

> Date - Функции для работы с датой и временем
	> Список возможных параметров
			dateString - Строковое представление даты из RFC2822
			year - Год после 1900 года.
			month - Целое число между 0 и 11, представляющее месяц.
			day - Необязательный параметр. Целое число между 1 и 31, представляющее дни месяца.
			hour - Необязательный параметр. Целое число между 0 и 23, представляющее часы.
			minute - Необязательный параметр. Целое число между 0 и 59, представляющее минуты.
			second - Необязательный параметр. Целое число между 0 и 59, представляющее секунды.
			millisecond - Необязательный параметр. Целое число между 0 и 999, представляющее миллисекунды.
 	> Создание
   	dateObj = new Date()
		dateObj = new Date(dateVal)
		dateObj = new Date(year, month, date[, hours, minutes, seconds, ms] )
	> Свойства
		Date.prototype - Позволяет добавлять свойства к объекту Date.
		Date.length - Значение свойства Date.length равно 7. Это количество аргументов, обрабатываемых конструктором.
  > Методы
		Date.now()  - Возвращает числовое значение, соответствующее текущему времени — количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.
			Синтакс: var timeInMs = Date.now()
			Пример1: var timeInMs = Date.now();
		Date.parse() - Разбирает строковое представление даты и возвращает количество миллисекунд с 1 января 1970 года 00:00:00 по местному времени.
			Синтакс: Date.parse(dateString)
			Пример1: Date.parse('Aug 9, 1995');
			Пример2: Date.parse('Wed, 09 Aug 1995 00:00:00');
		Date.UTC() - Принимает те же самые параметры, что и самый длиный вариант конструктора (то есть, от 2 до 7) и возвращает количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC.
			Синтакс: Date.UTC(year, month[, day[, hour[, minute[, second[, millisecond]]]]])
			Пример1: var utcDate = new Date(Date.UTC(96, 11, 1, 0, 0, 0));
	> Экземпляры объекта Date
		+ Методы Получения значения
			Date.prototype.getDate() - Возвращает день месяца (1-31) указанной даты по местному времени.
			Date.prototype.getDay() - Возвращает день недели (0-6) указанной даты по местному времени.
			Date.prototype.getFullYear() - Возвращает год (4 цифры для 4-х значного года) указанной даты по местному времени.
			Date.prototype.getHours() - Возвращает часы (0-23) указанной даты по местному времени.
			Date.prototype.getMilliseconds() - Возвращает миллисекунды (0-999) указанной даты по местному времени.
			Date.prototype.getMinutes() - Возвращает минуты (0-59) указанной даты по местному времени.
			Date.prototype.getMonth() - Возвращает месяц (0-11) указанной даты по местному времени.
			Date.prototype.getSeconds() - Возвращает секунды (0-59) указанной даты по местному времени.
			Date.prototype.getTime() - Возвращает числовое значение указанной даты как количество миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC (отрицательное значение для даты до этого момента).
			Date.prototype.getTimezoneOffset() - Возвращает смещение часового пояса в минутах для текущей локали.
			Date.prototype.getUTCDate() - Возвращает день месяца (1-31) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCDay() - Возвращает день недели (0-6) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCFullYear() - Возвращает год (4 цифры для 4-х значного года) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCHours() - Возвращает часы (0-23) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCMilliseconds() - Возвращает миллисекунды (0-999) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCMinutes() - Возвращает минуты (0-59) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCMonth() - Возвращает месяц (0-11) указанной даты по всемирному координированному времени.
			Date.prototype.getUTCSeconds() - Возвращает секунды (0-59) указанной даты по всемирному координированному времени.
		+ Установки значения
			Date.prototype.setDate() - Устанавливает день месяца указанной даты по местному времени.
			Date.prototype.setFullYear() - Устанавливает полный год (4 цифры для 4-х значного года) указанной даты по местному времени.
			Date.prototype.setHours() - Устанавливает часы указанной даты по местному времени.
			Date.prototype.setMilliseconds() - Устанавливает миллисекунды указанной даты по местному времени.
			Date.prototype.setMinutes() - Устанавливает минуты указанной даты по местному времени.
			Date.prototype.setMonth() - Устанавливает месяц указанной даты по местному времени.
			Date.prototype.setSeconds() - Устанавливает секунды указанной даты по местному времени.
			Date.prototype.setTime() - Устанавливает объект Date во время, представляемое количеством миллисекунд, прошедших с 1 января 1970 года 00:00:00 по UTC (отрицательное значение устанавливает даты до этого момента).
			Date.prototype.setUTCDate() - Устанавливает день месяца указанной даты по всемирному координированному времени.
			Date.prototype.setUTCFullYear() - Устанавливает полный год (4 цифры для 4-х значного года) указанной даты по всемирному координированному времени.
			Date.prototype.setUTCHours() - Устанавливает часы указанной даты по всемирному координированному времени.
			Date.prototype.setUTCMilliseconds() - Устанавливает миллисекунды указанной даты по всемирному координированному времени.
			Date.prototype.setUTCMinutes() - Устанавливает минуты указанной даты по всемирному координированному времени.
			Date.prototype.setUTCMonth() - Устанавливает месяц указанной даты по всемирному координированному времени.
			Date.prototype.setUTCSeconds() - Устанавливает секунды указанной даты по всемирному координированному времени.
		+ Получения преобразованного значения
			Date.prototype.toDateString() - Возвращает часть, содержащую только дату объекта Date в качестве человеко-читаемой строки.
			Date.prototype.toISOString() - Преобразует дату в строку, следуя расширенному формату ISO 8601.
			Date.prototype.toJSON() - Возвращает строку, представляющую объект Date, используя метод toISOString(). Предназначен для использования методом JSON.stringify().
			Date.prototype.toLocaleDateString() - Возвращает строку с датой, чьё представление зависит от системных настроек локали.
			!Date.prototype.toLocaleFormat()  - Преобразует дату в строку, используя строку форматирования.
			Date.prototype.toLocaleString() - Возвращает строку, чьё представление зависит от настроек локали. Переопределяет метод Object.prototype.toLocaleString().
			Date.prototype.toLocaleTimeString() - Возвращает строку со временем, чьё представление зависит от системных настроек локали.
			!Date.prototype.toSource()  - Возвращает строковое представление исходного кода эквивалентного объекта Date; вы можете использовать это значение для создания нового объекта. Переопределяет метод Object.prototype.toSource().
			Date.prototype.toString() - Возвращает строковое представление указанного объекта Date. Переопределяет метод Object.prototype.toString().
			Date.prototype.toTimeString() - Возвращает часть, содержащую только время объекта Date в качестве человеко-читаемой строки.
			Date.prototype.toUTCString() - Преобразует дату в строку, используя часовой пояс UTC.
			Date.prototype.valueOf() - Возвращает примитивное значение объекта Date. Переопределяет метод Object.prototype.valueOf().
	> Из других источников:
		performance.now() - возвращает количество миллисекунд, прошедшее с начала загрузки страницы. если точнее – с момента выгрузки предыдущей страницы из памяти.

> Error - объект для представления ошибок
	> Создание
		new Error(message)
	> Свойства
		message
		name

> EvalError - Ошибка при выполнении функции eval
	> Создание
		new EvalError(message)

> Function - Каждая функция в яваскрипт является объектом класса Function.
	> Создание
		new Function ([arg1[, arg2[, ... argN]],] functionBody)
	> Методы
		call - вызывает функцию с указанным значением this и индивидуально предоставленными аргументами.
			Вызов func.call(context, a, b...) – то же, что обычный вызов func(a, b...), но с явно указанным this(=context).
			При помощи call можно легко взять метод одного объекта, в том числе встроенного, и вызвать в контексте другого.
			Синтакс: func.call(context, arg1, arg2, ...)
		apply - вызывает функцию с указанным значением this и аргументами, предоставленными в виде массива (либо массивоподобного объекта).
			func.call(context, arg1, arg2); // (1)
			(1) идентичен вызову (2)
			func.apply(context, [arg1, arg2]); // (2)
			Синтакс: fun.apply(thisArg[, argsArray])
	> Свойства
		length

> Math - Встроенный объект, предоставляющий константы и методы для математических вычислений.
	> Методы
		Округления ------------------------------------------------------------------------------
		Math.round - Округляет до ближайшего целого
		Math.floor - Округляет вниз
		Math.ceil - Округляет вверх
	
		Тригонометрия ---------------------------------------------------------------------------
		Math.acos(x) - Возвращает арккосинус x (в радианах)
		Math.asin(x) - Возвращает арксинус x (в радианах)
		Math.atan(x) - Возвращает арктангенс x (в радианах)
		Math.atan2(y, x) - Возвращает угол до точки (y, x).
		Math.sin(x) - Вычисляет синус x (в радианах)
		Math.cos(x) - Вычисляет косинус x (в радианах)
		Math.tan(x) - Возвращает тангенс x (в радианах)

		Функции общего назначения ---------------------------------------------------------------
		Math.exp(x) - Возвращает ex, где e – основание натуральных логарифмов.
		Math.min(a, b, c...) - Возвращает наименьший из списка аргументов
		Math.random() - Возвращает псевдо-случайное число в интервале [0,1) – то есть между 0(включительно) и 1(не включая). Генератор случайных чисел инициализуется текущим временем.
		Math.sqrt(x) - Возвращает квадратный корень из x.
		Math.log(x) - Возвращает натуральный (по основанию e) логарифм x.
		Math.pow(x, exp) - Возводит число в степень, возвращает x(exp)
		Math.max(a, b, c...) - Возвращает наибольший из списка аргументов
		Math.abs(x) - Возвращает абсолютное значение числа
	
	> Свойства
		Math.E
		Math.LN2
		Math.LOG2E
		Math.LOG10E
		Math.PI
		Math.SQRT12
		Math.SQRT2
		Math.LN10

> Number - Объект для работы с числами
	> Создание
		numObj = new Number(value) // не используется
		numObj = Number(value)
		// обычно используются статические методы Number.*
	> Методы
		toExponential
		toString
		toPrecision
		toFixed - num.toFixed(precision); округляет число num до точности precision и возвращает результат в виде строки
	> Свойства
		Number.MAX_VALUE
		Number.MIN_VALUE
		Number.NaN
		Number.NEGATIVE_INFINITY
		Number.POSITIVE_INFINITY

> Object - Базовый объект javascript
	> Создание
		obj = new Object( [value] )
		// или, более часто
		obj = { 
		  key1: val1,
		  key2: val2,
		  ...
			}
	> Методы
		toString

	> Свойства
		prototype
	> Оператор
		instanceof - позволяет проверить, создан ли объект данной функцией, причём работает для любых функций.

> RangeError - Ошибка, когда число не лежит в нужном диапазоне
	> Создание
		new RangeError(message)

> ReferenceError - Ошибку при ссылке на несуществующую переменную
	> Создание
		new ReferenceError(message)

> RegExp - Позволяет работать с регулярными выражениями.
	> Создание
		// полная форма записи
		var expr = new RegExp(pattern [, flags]);
		// сокращенная форма записи (литеральный формат)
		var expr = /pattern/flags;
	> Методы
		toString
		test
		exec
	> Свойства
		global
		ignoreCase
		multiline
		lastIndex
		source

> String - Базовый объект для строк. Позволяет управлять текстовыми строками, форматировать их и выполнять поиск подстрок.
	> Список возможных терминов:
			beginSlice - Индекс, с которого начинать извлечение
			endSlice - Индекс, которым заканчивать извлечение
			numN - последовательность чисел, представляющих собой коды Unicode-символов 

	> Создание
			a = 'my string'
			b = new String(object) // синтаксис устарел и не используется
			c = String(object)
	> Методы
		+ split - разбивает объект String на массив строк путём разделения строки указанной подстрокой.
			Синтакс: str.split([separator[, limit]])
		+ charCodeAt - возвращает числовое значение Юникода для символа по указанному индексу
			Синтакс: str.charCodeAt(index)
		+ fromCharCode - возвращает строку из Unicode-символов.
				Синтакс: String.fromCharCode(num1, ..., numN) 
		+ charAt - возвращает указанный символ из строки.
			Синтакс: str.charAt(index)
		+ concat - объединяет текст из двух или более строк и возвращает новую строку.
			Синтакс: str.concat(string2, string3[, ..., stringN])
		+ lastIndexOf - возвращает индекс последнего вхождения указанного значения в строковый объект String, на котором он был вызван, или -1, если ничего не было найдено. Поиск по строке ведётся от конца к началу, начиная с индекса fromIndex.
			Синтакс: str.lastIndexOf(searchValue[, fromIndex])
		+ search - выполняет поиск сопоставления между регулярным выражением и этим объектом String.
			Синтакс: str.search([regexp])
		+ match - возвращает получившиеся совпадения при сопоставлении строки с регулярным выражением.
			Синтакс: str.match(regexp)
		+ toLowerCase - возвращает значение вызывающей строки преобразуются в нижний регистр.
			Синтакс: str.toLowerCase()
		+ toUpperCase - возвращает значение строки, на которой он был вызван, преобразованное в верхний регистр.
			Синтакс: str.toUpperCase()
		+ toLocaleLowerCase - возвращает значение строки, на которой он был вызван, преобразованное в нижний регистр согласно правилам преобразования регистра локали.
			Синтакс: str.toLocaleLowerCase()
		+ toLocaleUpperCase - возвращает значение строки, на которой он был вызван, преобразованное в верхний регистр согласно правилам преобразования регистра локали.
			Синтакс: str.toLocaleUpperCase()
		+ toString - возвращает строку, представляющую указанный объект.
			Синтакс: str.toString()
		+ valueOf - возвращает примитивное значение объекта String. в виде строкового типа данных.
			Синтакс: str.valueOf()
		+ substring - возвращает подстроку строки между двумя индексами, или от одного индекса и до конца строки.
			Синтакс: str.substring(indexA[, indexB])
		+ slice - извлекает часть строки и возвращает новую строку.
				Синтакс: str.slice(beginSlice[, endSlice]) //без аргументов берёт весь массив или строку
		+ indexOf - возвращает индекс первого вхождения указанного значения в строковый объект String, на котором он был вызван, начиная с индекса fromIndex. Возвращает -1, если значение не найдено.
			Синтакс: str.indexOf(searchValue[, fromIndex])
		+ substr - возвращает указанное количество символов из строки, начиная с указанной позиции.
			Синтакс: str.substr(start[, length])
		+ replace - возвращает новую строку с некоторыми или всеми сопоставлениями с шаблоном, заменёнными на заменитель. Шаблон может быть строкой или регулярным выражением, а заменитель может быть строкой или функцией, вызываемой при каждом сопоставлении.
			Синтакс: str.replace(regexp|substr, newSubStr|function[, flags])

	> Свойства
		length

	(js2015)Строки
		str.includes(s) – проверяет, включает ли одна строка в себя другую, возвращает true/false.
		str.endsWith(s) – возвращает true, если строка str заканчивается подстрокой s.
		str.startsWith(s) – возвращает true, если строка str начинается со строки s.
		str.repeat(times) – повторяет строку str times раз.

> SyntaxError - Ошибка при интерпретации синтаксически неверного кода
	> Создание
		new SyntaxError(message)

> TypeError - Ошибка в типе значения
	> Создание
		new TypeError(message)

> URIError - Ошибка при некорректном URI
 	> Создание
 		new URIError(message)

Объекты браузера ----------------------------------------------------------------------------------

  window - Два в одном: глобальный объект и окно браузера

Глобальные методы ---------------------------------------------------------------------------------

    alert - Выводит модальное окно с сообщением
    clearInterval - Останавливает выполнение кода, заданное setInterval
    clearTimeout - Отменяет выполнение кода, заданное setTimeout
    	Синтакс: var timerId = setTimeout(...);
							 clearTimeout(timerId);
    confirm - Выводит сообщение в окне с двумя кнопками: "ОК" и "ОТМЕНА" и возвращает выбор посетителя
    decodeURI - Раскодирует URI, закодированный при помощи encodeURI
    decodeURIComponent - Раскодирует URI, закодированный при помощи encodeURIComponent
    encodeURI - Кодирует URI, заменяя каждое вхождение определенных символов на escape-последовательности, представляющие символ в кодировке UTF-8.
    encodeURIComponent - Кодирует компоненту URI, заменяя определенные символы на соответствующие UTF-8 escape-последовательности
    eval - Выполняет строку javascript-кода без привязки к конкретному объекту.
    isFinite - возвращает, является ли аргумент конечным числом
    isNaN - Проверяет, является ли аргумент NaN
    parseFloat - преобразует строковой аргумент в число с плавающей точкой
    parseInt - преобразует строковой аргумент в целое число нужной системы счисления
    prompt - Выводит окно с указанным текстом и полем для пользовательского ввода.
    setInterval - |var timerId = setInterval(func / code, delay[, arg1, arg2...])|Выполняет код или функцию через указанный интервал времени
    setTimeout - |var timerId = setTimeout(func / code, delay[, arg1, arg2...])|Выполняет код или функцию после указанной задержки

Глобальные свойства -------------------------------------------------------------------------------

    arguments - Переменная, доступная внутри функции и содержащая аргументы и ссылку на саму функцию.
    document - Отвечает за взаимодействие JavaScript с объектом документа(страницей)
    	Является корневым элементом DOM-дерева страницы (объект типа DOMDocument согласно спецификации DOM)
    Infinity - Бесконечность
    NaN - Не-Числовое значение
    undefined - Обозначает неопределенное значение

Синтаксические конструкции ------------------------------------------------------------------------

	break - Завершает текущий цикл или конструкции switch и label и передает управление на следующий вызов
    continue - Прекращает текущую итерацию цикла и продолжает выполнение со следующей итерации
    do..while - Задает цикл с проверкой условия после каждой итерации
    for - Создать цикл, указав начальное состояние, условие и операцию обновления состояния
    for..in - Перебрать свойства объекта, для каждого свойства выполнить заданный код
    function - Объявить функцию
    if - Выполняет тот или иной блок кода в зависимости от того, верно ли условие
    label - Указать идентификатор для использования в break и continue
    return - Возвратить результат работы функции
    switch - Сравнивает значение выражения с различными вариантами и при совпадении выполняет соответствующий код
    throw - Инициировать("бросить") исключение
    try..catch - Ловить все исключения, выпадающие из блока кода
    var - Объявить переменную (или несколько) в текущей области видимости
    while - Задает цикл, который выполняется до тех пор, пока условие верно. Условие проверяется перед каждой итерацией.
    with - Добавить новую область видимости
    Блок - Группировка javascript-вызовов внутри фигурных скобок


    Дескрипторы
    





Метод bind - fun.bind(thisArg[, arg1[, arg2[, ...]]]) - для привязки контекста к функции, создаёт функцию обёртку.

> Формат JSON -------------------------------------------------------------------------------------
	JSON.parse – читает объекты из строки в формате JSON.
		Синтакс: JSON.parse(str, reviver)
		reviver - является функцией function(key, value).
	JSON.stringify – превращает объекты в строку в формате JSON, используется, когда нужно из JavaScript передать данные по сети. 
		Синтакс: JSON.stringify(value, replacer, space)

window.onerror - Обработчик события для ошибок.
	Синтакс: window.onerror = funcRef;


strings.raw - содержатся участки строки в «изначально введённом» виде.


(js2015) Промисы ----------------------------------------------------------------------------------

	+Синтаксис: 
		new Promise(executor);
		new Promise(function(resolve, reject) { ... });
			executor:
				Объект функции с двумя аргументами resolve и reject. Первый аргумент вызывает успешное выполнение обещания, второй отклоняет его. Мы можем вызывать эти функции по завершении нашей операции.
	+Методы

		> Promise.all(iterable) - получает массив/объект промисов и возвращает промис, ждёт пока все 
			промисы завершатся, и переходит в состояние выполенно с массивом их результатов.

		> Promise.race(iterable) - получает итерируемый массив/объект с промисами, которые нужно 
			выполнить, и возвращает новый промис. результатом будет только первый успешно выполнившийся 
			промис из списка. Остальные игнорируются.

		> Promise.reject(error) - аналогично Promise.resolve(value) создаёт уже выполнившийся промис, 
			но не с успешным результатом, а с ошибкой error.

		> Promise.resolve(value) - создаёт успешно выполнившийся промис с результатом value.

	+Портотипные методы

		> Promise.prototype.catch(onRejected) - Добовляет функцию колбек, для оброботки отклонения обещания, которая возвращает новое обещание выполненое с переданным значением, если она вызванна, или оригинальное значение resolve, если обещание выполнено.

		> Promise.prototype.then(onFulfilled, onRejected) - Добовляет оброботчик выполнения и отклонения обещания, и возвращает новое обещание выполненое со значением вызванного обработчика, или оригинальное значение, если обещание не было обработанно (т.е. еслм соответствующий обработчик onFulfilled или onRejected не является функцией).

(js2015) Proxy ------------------------------------------------------------------------------------
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy/handler

		> getPrototypeOf – перехватывает обращение к методу getPrototypeOf.
		> setPrototypeOf – перехватывает обращение к методу setPrototypeOf.
		> isExtensible – перехватывает обращение к методу isExtensible.
		> preventExtensions – перехватывает обращение к методу preventExtensions.
		> getOwnPropertyDescriptor – перехватывает обращение к методу getOwnPropertyDescriptor.
		> defineProperty – перехватывает обращение к методу defineProperty.
		> has – перехватывает проверку существования свойства, которая используется в операторе in и в некоторых других методах встроенных объектов.
		> get – перехватывает чтение свойства.
		> set – перехватывает запись свойства.
		> deleteProperty – перехватывает удаление свойства оператором delete.
		> enumerate – срабатывает при вызове for..in или for..of, возвращает итератор для свойств объекта.
		> ownKeys – перехватывает обращения к методу getOwnPropertyNames.
		> apply – перехватывает вызовы target().
		> construct – перехватывает вызовы new target().
