

### ОБЪЕКТЫ ###

	Глобальный объект JavaScript Array — это конструктор для массивов, которые на высоком уровне представляют собой спископодобные объекты.
		Синтакс: 
		[element0, element1, ..., elementN]
		new Array(element0, element1[, ...[, elementN]])
		new Array(arrayLength)

	Объект ArrayBuffer используется для работы с бинарными данными. Он представляет собой ссылку на поток "сырых" двоичных данных, однако работать с ними напрямую возможности не дает. Вместо этого, вы можете создать типизированный массив или объект DataView, который можно использовать для чтения и записи данных в ArrayBuffer.

### СВОЙСТВА ###

	Свойство length представляется беззнаковым 32-х битным целым числом, указывающим количество элементов в массиве.
		Синтакс: arr.length

	Свойство Array.prototype представляет прототип для конструктора Array.

### МЕТОДЫ ###
	
	+Метод Array.from() создаёт новый экземпляр Array из массивоподобного или итерируемого объекта.
		Синтакс: Array.from(arrayLike[, mapFn[, thisArg]])
	
	+Метод Array.isArray() возвращает true, если объект является массивом и false, если он массивом не является.
		Синтакс: Array.isArray(obj)
	
	-Метод Array.observe() используется для асинхронного обзора изменений в массивах, подобно тому, как метод Object.observe() используется для тех же целей для объектов. Он предоставляет поток изменений в порядке их возникновения.
		Синтакс: Array.observe(arr, callback)
	
	+Метод Array.of() создаёт новый экземпляр массива Array из произвольного числа агрументов, вне зависимости от числа или типа аргумента.
		Синтакс: Array.of(element0[, element1[, ...[, elementN]]])
	
	+Метод concat() возвращает новый массив, состоящий из массива, на котором он был вызван, соединённого с другими массивами и/или значениями, переданными в качестве аргументов.
		Синтакс: var new_array = old_array.concat(value1[, value2[, ...[, valueN]]])
	
	+Метод copyWithin() копирует последовательность элементов массива внутри него в позицию, начинающуюся по индексу target. Копия берётся по индексам, задаваемым вторым и третьим аргументами start и end. Аргумент end является необязательным и по умолчанию равен длине array
		Синтакс: arr.copyWithin(target, start[, end = this.length])
	
	+Метод entries() возвращает новый объект итератора массива Array Iterator, содержащий пары ключ / значение для каждого индекса в массиве.
		Синтакс: arr.entries()
	
	+Метод every() проверяет, удовлетворяют ли все элементы массива условию, заданному в передаваемой функции.
		Синтакс: arr.every(callback[, thisArg])
	
	+Метод fill() заполняет все элементы массива от начального до конечного индексов одним значением.
		Синтакс: arr.fill(value[, start = 0[, end = this.length]])
	
	+Метод filter() создаёт новый массив со всеми элементами, прошедшими проверку, задаваемую в передаваемой функции.
		Синтакс: arr.filter(callback[, thisArg])
	
	+Метод find() возвращает значение в массиве, если элемент удовлетворяет условию проверяющей функции. В противном случае возвращается undefined.
		Синтакс: arr.find(callback[, thisArg])
	
	+Метод findIndex() возвращает индекс в массиве, если элемент удовлетворяет условию проверяющей функции. В противном случае возвращается -1.
		Синтакс: arr.findIndex(callback[, thisArg])
	
	+Метод forEach() выполняет указанную функцию один раз для каждого элемента в массиве.
		Синтакс: arr.forEach(callback[, thisArg])
	
	+Метод includes() определяет, содержит ли массив определённый элемент, возвращая в зависимости от этого true или false.
		Синтакс: array.includes(searchElement[, fromIndex])
	
	+Метод indexOf() возвращает первый индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет.
		Синтакс: arr.indexOf(searchElement[, fromIndex = 0])
	
	+Метод join() объединяет все элементы массива в строку.
		Синтакс: arr.join() arr.join(separator)
	
	+Метод keys() возвращает новый итератор массива Array Iterator, содержащий ключи каждого индекса в массиве.
		Синтакс: arr.keys()
	
	+Метод lastIndexOf() возвращает последний индекс, по которому данный элемент может быть найден в массиве или -1, если такого индекса нет. Массив просматривается от конца к началу, начиная с индекса fromIndex.
		Синтакс: arr.lastIndexOf(searchElement[, fromIndex = arr.length])
	
	+Метод map() создаёт новый массив с результатом вызова указанной функции для каждого элемента массива.
		Синтакс: arr.map(callback[, thisArg])
	
	+Метод pop() удаляет последний элемент из массива и возвращает его значение.
		Синтакс: arr.pop()
	
	+Метод push() добавляет один или более элементов в конец массива и возвращает новую длину массива.
		Синтакс: arr.push(element1, ..., elementN)
	
	+Метод reduce() применяет функцию к аккумулятору и каждому значению массива (слева-направо), сводя его к одному значению.
		Синтакс: arr.reduce(callback[, initialValue])
	
	+Метод reduceRight() применяет функцию к аккумулятору и каждому значению массива (справа-налево), сводя его к одному значению.
		Синтакс: arr.reduceRight(callback[, initialValue])
	
	+Метод reverse() на месте обращает порядок следования элементов массива. Первый элемент массива становится последним, а последний — первым.
		Синтакс: arr.reverse()
	
	+Метод shift() удаляет первый элемент из массива и возвращает его значение. Этот метод изменяет длину массива.
		Синтакс: arr.shift()
	
	+Метод some() проверяет, удовлетворяет ли хоть какой-нибудь элемент массива условию, заданному в передаваемой функции.
		Синтакс: arr.slice([begin[, end]])
	
	+Метод sort() на месте сортирует элементы массива и возвращает отсортированный массив. Сортировка не обязательно устойчива (англ.). Порядок cортировки по умолчанию соответствует порядку кодовых точек Unicode.
		Синтакс: arr.sort([compareFunction])
	
	+Метод splice() изменяет содержимое массива, удаляя существующие элементы и/или добавляя новые.
		Синтакс: array.splice(start, deleteCount[, item1[, item2[, ...]]])
	
	-Метод toSource() возвращает строковое представление исходного кода массива.
		Синтакс: arr.toSource()
	
	+Метод toString() возвращает строковое представление указанного массива и его элементов.
		Синтакс: arr.toString()
	
	+Метод toLocaleString() возвращает строковое представление элементов массива. Элементы преобразуются в строки с использованием своих собственных методов toLocaleString и эти строки разделяются локале-зависимой строкой (например, запятой «,»).
		Синтакс: arr.toLocaleString();
	
	+Метод unshift() добавляет один или более элементов в начало массива и возвращает новую длину массива.
		Синтакс: arr.unshift([element1[, ...[, elementN]]])
	
	+Метод values() возвращает новый объекта итератора массива Array Iterator, содержащий значения для каждого индекса в массиве.
		Синтакс: arr.values()

### ПОЛЕЗНОЕ ###

	//Проверка массива на наличие элемента. -1 не найдено / 0 найдено совпадений. ------------------+
		function contains(arr, elem) {
		   return arr.indexOf(elem) != -1;
		}
		contains(arr, elem); // true или false

	//мини функция проверки на массив
	function is_array(mix) {
	    return ( mix instanceof Array );
	}

### СОДЕРЖАНИЕ ПРИМЕРОВ ###
	
	//	### ПОЛЕЗНОЕ ###
	//	
	//Проверка массива на наличие элемента. -1 не найдено / 0 найдено совпадений. ------------------+
	//
	//	### ES6 ###
	//	
	//Деструктуризации массива. --------------------------------------------------------------------+
	//Деструктуризация массива. | Оператор spread он же ... | Остаточный массив. -------------------+
	//Деструктуризация массива. | Значение по умолчанию примитив. ----------------------------------+
	//Деструктуризация массива. | Значение по умолчанию функция. -----------------------------------+
	//
	//	### Example (ES5) ###
	//	
	// 	Перебирающие методы =========================================================================
	// 	
	//метод forEach - аналог for -------------------------------------------------------------------+
	//метод filter - фильтрация массива ------------------------------------------------------------+
	//метод map - трансформация массива ------------------------------------------------------------+
	//методы every/some - проверка массива ---------------------------------------------------------+
	//методы reduce/reduceRight - проход по массиву с вычислением значения. ------------------------+
	//z по reduce.Массив частичных сумм. -----------------------------------------------------------+
	//
	// 	=============================================================================================
	// 	
	//простое создание и вывод массива -------------------------------------------------------------+
	//Удаление массива -----------------------------------------------------------------------------+
	//Хранимые значения	----------------------------------------------------------------------------+
	//Методы pop/push, shift/unshift ---------------------------------------------------------------+
	//Назначение свойств массиву -------------------------------------------------------------------+
	//Вывод массива с «дырами» ---------------------------------------------------------------------+
	//Перебор массива ------------------------------------------------------------------------------+
	//Используем length для укорачивания массива ---------------------------------------------------+
	//Многомерные массивы --------------------------------------------------------------------------+
	//Копирование массива --------------------------------------------------------------------------+
	//Метод split ----------------------------------------------------------------------------------+
	//Метод join -----------------------------------------------------------------------------------+
	//Метод splice ---------------------------------------------------------------------------------+
	//Метод slice ----------------------------------------------------------------------------------+
	//метод sort(fn) Сортировка --------------------------------------------------------------------+
	//Метод arr.reverse() --------------------------------------------------------------------------+
	//Метод concat() -------------------------------------------------------------------------------+
	//Методы indexOf/lastIndexOf -------------------------------------------------------------------+
	//z. Получить случайное значение из массива ----------------------------------------------------+
	//z. Калькулятор для введёных значений. Введённое число добавляется в массив и сумм. -----------+
	//z. Поиск в массиве ---------------------------------------------------------------------------+
	//z. Добавить класс в строку -------------------------------------------------------------------+
	//z. Перевести текст вида border-left-width в borderLeftWidth ----------------------------------+
	//z. Функция removeClass. Удаление класса из свойства объекта.----------------------------------+
	//z. Фильтрация массива "на месте". Удаление всего что не входит в диапазон.--------------------+
	//z. Сортировка массива в обратном порядке.-----------------------------------------------------+
	//z. Скопировать и отсортировать массив. -------------------------------------------------------+
	//z. Случайный порядок в массиве. --------------------------------------------------------------+
	//z. Вывести односвязный список ----------------------------------------------------------------+
	//z. Оставить уникальные элементы массива ------------------------------------------------------+

### ES6 ###

	//Деструктуризации массива. --------------------------------------------------------------------+
		let [firstName, lastName] = ["Илья", "Кантор"];
		alert(firstName); // Илья
		alert(lastName);  // Кантор

	//Деструктуризация массива. | Оператор spread он же ... | Остаточный массив. -------------------+
		let [firstName, lastName, ...other] = "Юлий Цезарь Император Рима".split(" ");
		alert(firstName); // Юлий
		alert(lastName);  // Цезарь
		alert(other);      // Император,Рима (массив из 2х элементов)

	//Деструктуризация массива. | Значение по умолчанию примитив. ----------------------------------+
		let [firstName="Гость", lastName="Анонимный"] = [];
		alert(firstName); // Гость
		alert(lastName);  // Анонимный

	//Деструктуризация массива. | Значение по умолчанию функция. -----------------------------------+
		function defaultLastName() {
		  	return Date.now() + '-visitor';
		}
		let [firstName, lastName=defaultLastName()] = ["Вася"];
		alert(firstName); // Вася
		alert(lastName);  // 1436...-visitor //получит значение, соответствующее текущей дате

### Example (ES5) ###

	/* Перебирающие методы ======================================================================== */

	//метод forEach - аналог for -------------------------------------------------------------------+
		var arr = ["Яблоко", "Апельсин", "Груша"];

		arr.forEach(function(item, i, arr) {
		  alert( i + ": " + item + " (массив:" + arr + ")" );
		});

	//метод filter - фильтрация массива ------------------------------------------------------------+
		var arr = [1, -1, 2, -2, 3];

		var positiveArr = arr.filter(function(number) {
		  return number > 0;
		});

		alert( positiveArr ); // 1,2,3
	
	//метод map - трансформация массива ------------------------------------------------------------+
		var names = ['HTML', 'CSS', 'JavaScript'];

		var nameLengths = names.map(function(item) {
		  return item.length;
		});

		// получили массив с длинами
		alert( nameLengths ); // 4,3,10
	
	//методы every/some - проверка массива ---------------------------------------------------------+
		var arr = [1, -1, 2, -2, 3];

		function isPositive(number) {
		  return number > 0;
		}

		alert( arr.every(isPositive) ); // false, не все положительные
		alert( arr.some(isPositive) ); // true, есть хоть одно положительное
	
	//методы reduce/reduceRight - проход по массиву с вычислением значения. ------------------------+
		var arr = [1, 2, 3, 4, 5]

		// убрали 0 в конце
		var result = arr.reduce(function(sum, current) {
		  return sum + current
		});

		alert( result ); // 15
	
	//z по reduce.Массив частичных сумм. -----------------------------------------------------------+
		function getSums(arr) {
		  var result = [];
		  if (!arr.length) return result;

		  var totalSum = arr.reduce(function(sum, item) {
		    result.push(sum);
		    return sum + item;
		  });
		  result.push(totalSum);

		  return result;
		}

		alert(getSums([1,2,3,4,5])); // 1,3,6,10,15
		alert(getSums([-2,-1,0,1])); // -2,-3,-3,-2

	/* ============================================================================================ */

	//простое создание и вывод массива -------------------------------------------------------------+
		var fruits = ["Яблоко", "Апельсин", "Слива"];
		alert( fruits[0] ); // Яблоко
		alert( fruits[1] ); // Апельсин
		alert( fruits[2] ); // Слива

	//Удаление массива -----------------------------------------------------------------------------+
		//примитивный способ, оставляет дыры
		var arr = ["Я", "иду", "домой"];
		delete arr[1]; // значение с индексом 1 удалено

	//Хранимые значения	----------------------------------------------------------------------------+
		var arr = [ 1, 'Имя', { name: 'Петя' }, true ];// микс значений
		// получить объект из массива и тут же -- его свойство
		alert( arr[2].name ); // Петя

	//Методы pop/push, shift/unshift ---------------------------------------------------------------+
		var fruits = ["Яблоко", "Апельсин", "Груша"];

		//Удаление последнего элемента массива
		fruits.pop(); // удалили последний элемент массива"Груша"
		var elem = fruits.pop() //удаляет и возвращает последний элемент.
		fruits.length = 2; // укоротить массив до 2 элементов

		//Добавление в конец элементов массива
		fruits.push("Груша"); // добавляем в конец массива "Uheif"
		fruits.push("Апельсин", "Персик");
		fruits[fruits.length] = 'Компьютер'; //альтернативный push способ

		//Удаление первого элемента массива
		fruits.shift(); // удалили первый эелемент массива 'Яблоко'
		var elem = arr.shift() //удаляет и возвращает первый элемент.

		//добовление первых элементов массива
		fruits.unshift('Яблоко'); // добавляем в начало элемент массива 'Яблоко'
		fruits.unshift("Ананас", "Лимон");

		//Получение конечных элементов массива
		var lastItem = goods[goods.length - 2]; //получить предпоследний элемент
		var lastItem = goods[goods.length - 1]; //получить последний элемент

	//Назначение свойств массиву -------------------------------------------------------------------+
		var fruits = []; // создать массив
		fruits[99999] = 5; // присвоить свойство с любым номером
		fruits.age = 25; // назначить свойство со строковым именем	

	//Вывод массива с «дырами» ---------------------------------------------------------------------+
		var a = [];
		a[0] = 0;
		a[5] = 5;
		alert( a ); // 0,,,,,5

	//Перебор массива ------------------------------------------------------------------------------+
		var arr = ["Яблоко", "Апельсин", "Груша"];
		//for (var i=0; i<arr.length; i++)//Быстрый перебор цикла
		for (var i = 0; i < arr.length; i++) {
		  	alert( arr[i] );
		}
	
	//Используем length для укорачивания массива ---------------------------------------------------+
		var arr = [1, 2, 3, 4, 5];
		arr.length = 2; // укоротить до 2 элементов
		alert( arr ); // [1, 2]
		arr.length = 5; // вернуть length обратно, как было
		alert( arr[3] ); // undefined: значения не вернулись

	//Многомерные массивы --------------------------------------------------------------------------+
		var matrix = [
		  	[1, 2, 3],
		  	[4, 5, 6],
		  	[7, 8, 9]
		];
		alert( matrix[1][1] ); // центральный элемент

	//Копирование массива --------------------------------------------------------------------------+
		var arr2 = [];
		for (var i = 0; i < arr.length; i++) arr2[i] = arr[i];

	//Метод split ----------------------------------------------------------------------------------+
		var names = 'Маша, Петя, Марина, Василий';
		var arr = names.split(', ');
		for (var i = 0; i < arr.length; i++) {
		  alert( 'Вам сообщение ' + arr[i] );
		}
		
		//split с пустой строкой
		var str = "тест";
		alert( str.split('') ); // т,е,с,т
		
		//со вторым необязательным аргументом
		alert( "a,b,c,d".split(',', 2) ); // a,b

	//Метод join -----------------------------------------------------------------------------------+
		var arr = ['Маша', 'Петя', 'Марина', 'Василий'];
		var str = arr.join(';');
		alert( str ); // Маша;Петя;Марина;Василий
		
		//new Array + join = Повторение строки
		alert( new Array(4).join("ля") ); // ляляля //встовляет между пустыми элементами "ля"

	//Метод splice ---------------------------------------------------------------------------------+
		var arr = ["Я", "сейчас", "изучаю", "JavaScript"];
		arr.splice(1, 1); // начиная с позиции 1, удалить 1 элемент
		arr.splice(0, 3, "Мы", "изучаем") // удалить 3 первых элемента и добавить другие вместо них
		//-
		var removed = arr.splice(0, 2);// удалить 2 первых элемента
		alert( removed ); // "Я", "сейчас" //возвращаем удалёнлные элементы
		//-
		arr.splice(2, 0, "сложный", "язык"); //вставление без удаления
		
		//-с отрицательной позицией 
		var arr = [1, 2, 5]
		// начиная с позиции индексом -1 (перед последним элементом)
		// удалить 0 элементов,
		// затем вставить числа 3 и 4
		arr.splice(-1, 0, 3, 4);

		alert( arr ); // результат: 1,2,3,4,5
	
	//Метод slice ----------------------------------------------------------------------------------+
		var arr = ["Почему", "надо", "учить", "JavaScript"];
		//c 2 аргументами
		var arr2 = arr.slice(1, 3); // элементы 1, 2 (не включая 3)
		//с 1 аргементом 
		var arr2 = arr.slice(1); // взять все элементы, начиная с номера 1
		//с отрицательным аргементом
		var arr2 = arr.slice(-2); // копировать от 2-го элемента с конца и дальше
		//без аргументов
		var fullCopy = arr.slice(); //весь массив
	
	//метод sort(fn) Сортировка --------------------------------------------------------------------+
		//Сортировка без fn так что приравнивает и сравнивает как строки
		var arr = [ 1, 2, 15 ];
		arr.sort();
		alert( arr );  // 1, 15, 2
		//с функцией сортировки
		function compareNumeric(a, b) {
		  if (a > b) return 1;
		  if (a < b) return -1;
		}
		var arr = [ 1, 2, 15 ];
		arr.sort(compareNumeric); // не compareNumeric(), иначе ошибка!
		alert(arr);  // 1, 2, 15
	
	//Метод arr.reverse() --------------------------------------------------------------------------+
		var arr = [1, 2, 3];
		arr.reverse();
		alert( arr ); // 3,2,1
	
	//Метод concat() -------------------------------------------------------------------------------+
		var arr = [1, 2];
		var newArr = arr.concat(3, 4);
		alert( newArr ); // 1,2,3,4
		//-
		var arr = [1, 2];
		var newArr = arr.concat([3, 4], 5); // то же самое, что arr.concat(3,4,5)
		alert( newArr ); // 1,2,3,4,5
	
	//Методы indexOf/lastIndexOf -------------------------------------------------------------------+
		var arr = [1, 0, false];
		alert( arr.indexOf(0) ); // 1
		alert( arr.indexOf(false) ); // 2
		alert( arr.indexOf(null) ); // -1
	
	//z. Получить случайное значение из массива ----------------------------------------------------+
		var arr = ["Яблоко", "Апельсин", "Груша", "Лимон"];
		var rand = Math.floor(Math.random() * arr.length);
		alert( arr[rand] );

	//z. Калькулятор для введёных значений. Введённое число добавляется в массив и сумм. -----------+
		var numbers = [];

		while (true) {
		  var value = prompt("Введите число", 0);

		  if(value === "" || value === null || isNaN(value)) break;

		  numbers.push(+value);
		}

		var sum = 0;
		for (var i = 0; i < numbers.length; i++) {
		  sum += numbers[i];
		}

		alert( sum );

	//z. Поиск в массиве ---------------------------------------------------------------------------+
		// создаем пустой массив и проверяем поддерживается ли indexOf
		if ([].indexOf) {
		  var find = function(array, value) {
		    return array.indexOf(value); //пользуемся функцией indexOf
		  }
		} else {
		  var find = function(array, value) {
		    for (var i = 0; i < array.length; i++) { //перебираем
		      if (array[i] === value) return i; //возращаем
		    }
		    return -1;
		  }
		}
	
	//z. Добавить класс в строку -------------------------------------------------------------------+
		function addClass (obj, cls) {
			var classes = obj.className() ? obj.className.split (' ') : [];
			for (var i = 0; i < classes.length ; i++) {
				if (classes[i] == cls) return; //класс уже есть
			}
			classes.push(cls); //добавить
			obj.className = classes.join(' ');//обновить свойство
			}
		}
		var obj = {
		  className: 'open menu'
		} 
		addClass(obj, 'new');
		addClass(obj, 'open');
		addClass(obj, 'me');
		alert(obj.className) // open menu new me
	
	//z. Перевести текст вида border-left-width в borderLeftWidth ----------------------------------+
		/* 
		Задача может быть решена несколькими способами. Один из них – разбить строку по дефису 
		str.split('-'), затем последовательно сконструировать новую.
		*/
		function camelize(str) {
		  var arr = str.split('-');

		  for (var i = 1; i < arr.length; i++) {
		    // преобразовать: первый символ с большой буквы
		    arr[i] = arr[i].charAt(0).toUpperCase() + arr[i].slice(1);
		  }

		  return arr.join('');
		}
		alert( camelize("background-color") ); // backgroundColor
		alert( camelize("list-style-image") ); // listStyleImage
		alert( camelize("-webkit-transition") ); // WebkitTransition
	
	//z. Функция removeClass. Удаление класса из свойства объекта.----------------------------------+
		function removeClass(obj, cls) {
		  //с помощью split разбиваем строку 'open menu menu' на 'open', 'menu', 'menu'
		  var classes = obj.className.split(' ');
		  //перебираем по всей длинне classes.length массива
		  for (var i = 0; i < classes.length; i++) {
		    //если указанный cls найден
		    if (classes[i] == cls) {
		      // удалить класс
		      classes.splice(i, 1); 
		      // возращаем счётчик на 1пункт назад, после удаления класса
		      i--; 
		    }
		  }
		  //склеиваем массив с разделителем join(' ')
		  obj.className = classes.join(' ');
		}

		var obj = {
		  className: 'open menu menu'
		}

		removeClass(obj, 'blabla');
		removeClass(obj, 'menu');
		console.log(obj.className); // open
	
	//z. Фильтрация массива "на месте". Удаление всего что не входит в диапазон.--------------------+
		function filterRangeInPlace(arr, a, b) {
		  //перебираем массив по всей длинне
		  for (var i = 0; i < arr.length; i++) {
		    //сохраняем результат счётчика в переменную
		    var val = arr[i];
		    //всё что выходит за диапазон 
		    if (val < a || val > b) {
		      //удаляем по 1 элементу и сдвигаем счётчик на -1 позицию
		      arr.splice(i--, 1);
		    }
		  }
		}

		var arr = [5, 3, 8, 1];

		filterRangeInPlace(arr, 1, 4); // удалены числа вне диапазона 1..4
		console.log("после - " + arr); // массив изменился: остались [3, 1]
	
	//z. Сортировка массива в обратном порядке.-----------------------------------------------------+
		var arr = [5, 2, 1, -10, 8];

		function compareReversed(a, b) {
		  return b - a;
		}

		arr.sort(compareReversed);

		console.log( arr ); // [8, 5, 2, 1, -10]
	
	//z. Скопировать и отсортировать массив. -------------------------------------------------------+
		var arr = ["HTML", "JavaScript", "CSS"];
		//копируем весь массив arr.slice() применяем сортировку arr.slice() и сох в arrSorted
		var arrSorted = arr.slice().sort();

		console.log( "arr = " + arr ); // HTML, JavaScript, CSS (без изменений)
		console.log( "arrSorted = " + arrSorted ); // CSS, HTML, JavaScript
	
	//z. Случайный порядок в массиве. --------------------------------------------------------------+
		/* 
		Обычно Math.random() возвращает результат от 0 до 1. Вычтем 0.5, чтобы область значений 
		стала [-0.5 ... 0.5).
		*/
		var arr = [1, 2, 3, 4, 5];

		function compareRandom(a, b) {
		  return Math.random() - 0.5;
		}

		arr.sort(compareRandom);
		console.log( "arr = " + arr ); //в случайном порядке

	//z. Вывести односвязный список ----------------------------------------------------------------+
		/* В цикле */
			var list = {
			  value: 1,
			  next: {
			    value: 2,
			    next: {
			      value: 3,
			      next: {
			        value: 4,
			        next: null
			      }
			    }
			  }
			};

			function printList(list) {
			  var tmp = list; // чтобы сохраить исходное значения для дальнейшего расширения кода

			  while (tmp) {
			    alert( tmp.value );
			    tmp = tmp.next;
			  }

			}

		printList(list);

		/* С обратным вызовом */
			var list = {
			  value: 1,
			  next: {
			    value: 2,
			    next: {
			      value: 3,
			      next: {
			        value: 4,
			        next: null
			      }
			    }
			  }
			};

			function printReverseList(list) {
			  var arr = [];
			  var tmp = list;

			  while (tmp) {
			    arr.push(tmp.value);
			    tmp = tmp.next;
			  }

			  for (var i = arr.length - 1; i >= 0; i--) {
			    alert( arr[i] );
			  }
			}

			printReverseList(list);

	//z. Оставить уникальные элементы массива ------------------------------------------------------+
		function unique(arr) {
		  var obj = {};

		  for (var i = 0; i < arr.length; i++) {
		    var str = arr[i];
		    obj[str] = true; // запомнить строку в виде свойства объекта
		  }

		  return Object.keys(obj); // или собрать ключи перебором для IE8-
		}

		var strings = ["кришна", "кришна", "харе", "харе",
		  "харе", "харе", "кришна", "кришна", "8-()"
		];

		alert( unique(strings) ); // кришна, харе, 8-()





