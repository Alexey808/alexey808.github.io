WebReference.ru.
http://uroki-css.ru/cssref/pr_gen_content.php

transform  http://shpargalkablog.ru/2011/09/transform-css.html
transform-origin 
box-shadow

flex-containers - display: flex | inline-flex
flex-direction - flex-direction: row | row-reverse | column | column-reverse
flex-wrap - flex-wrap: nowrap | wrap | wrap-reverse
flex-flow - flex-flow: flex-direction | flex-wrap
justify-content - justify-content: flex-start | flex-end | center | space-between | space-around


сайты с шрифтами
	http://pixelgene.ru/category/fonts
	https://www.google.com/fonts/
имитация листка, трюки с дивками и псевдоэлементами
	http://www.paulund.co.uk/creating-different-css3-box-shadows-effects
	+--------------+
	box-shadow: 0 0 10px rgba(0,0,0,0.5); /*тень блоку*/
	text-shadow: 1px 1px 2px black, 0 0 1em red; /*тень тексту*/
	+--------------+
=== СОДЕРЖАНИЕ ===

--- ПРАВИЛА ---

	@charset - Применяется для задания кодировки внешнего CSS-файла. Это имеет значение в том случае, если в CSS-файле используются символы национального алфавита.
	@document - @document устанавливает стилевые правила на основе адреса документа. К примеру, если адреса мобильной и основной версии сайта различаются, то мы можем задать собственный стиль элементов для каждой версии.
	@font-face - Определяет настройки шрифтов, а также позволяет загрузить специфичный шрифт на компьютер пользователя.
	@import - Позволяет импортировать содержимое CSS-файла в текущую стилевую таблицу.
	@keyframes - @keyframes устанавливает ключевые кадры при анимации элемента. Ключевой кадр это свойства элемента (прозрачность, цвет, положение и др.), которые должны применяться к элементу в заданный момент времени.
	@media - Указывает тип носителя, для которого будет применяться указанный стиль. В качестве типов выступают различные устройства, например, принтер, коммуникатор, монитор и др.
	@page - Задаёт значение полей при печати документа.
	@viewport - Позволяет оптимизировать макет веб-страницы в зависимости от различных устройств и их размеров.

--- АНИМАЦИЯ ---

	@keyframes - устанавливает ключевые кадры при анимации элемента. Ключевой кадр это свойства элемента (прозрачность, цвет, положение и др.), которые должны применяться к элементу в заданный момент времени.
	animation - Универсальное свойство которое задаёт сразу несколько параметров анимации.
	animation-delay - Устанавливает время ожидания перед запуском цикла анимации.
	animation-direction - Устанавливает направление движения анимации.
	animation-duration - Задаёт время в секундах или миллисекундах, сколько должна длиться анимация движения.
	animation-fill-mode - Определяет, какие стили должны применяться к элементу, когда анимация не проигрывается. Например, после её завершения или при остановке
	animation-iteration-count -Устанавливает, сколько раз должен проигрываться анимационный цикл до остановки.
	animation-name - Устанавливает одну или несколько анимаций, которые применяются к элементу.
	animation-play-state - Свойство определяет, проигрывать анимацию или поставить её на паузу.
	animation-timing-function - Устанавливает, по какой зависимости должна происходить анимация каждого цикла.
	transition - Универсальное свойство, которое определяет эффект перехода между двумя состояниями элемента, они могут быть установлены с помощью псевдоэлемента :hover или :active, а также динамически через JavaScript.
	transition-delay - Устанавливает время ожидания перед запуском эффекта анимации перехода.
	transition-duration - Задаёт время в секундах или миллисекундах, сколько должна длиться анимация перехода до её завершения.
	transition-property - Устанавливает имя стилевого свойства, значение которого будет отслеживаться для создания эффекта перехода.
	transition-timing-function - Устанавливает, насколько быстро должно изменяться значение стилевого свойство для которого применяется эффект перехода.

--- ГРАНИЦЫ ---

	border - Позволяет одновременно установить толщину, стиль и цвет границы вокруг элемента.
		border-bottom - Позволяет одновременно установить толщину, стиль и цвет границы внизу элемента.
		border-bottom-color - Устанавливает цвет границы внизу элемента.
		border-bottom-left-radius - Устанавливает радиус скругления левого нижнего уголка рамки.
		border-bottom-right-radius - Устанавливает радиус скругления правого нижнего уголка границы.
		border-bottom-style - Устанавливает стиль границы внизу элемента.
		border-bottom-width - Устанавливает толщину границы внизу элемента.
		border-color - Устанавливает цвет границы на разных сторонах элемента.
		border-image - Используется для отображения рисованной рамки вокруг элемента.
		border-left - Позволяет одновременно установить толщину, стиль и цвет левой границы элемента.
		border-left-color - Задаёт цвет границы слева от элемента.
		border-left-style - Устанавливает стиль границы слева от элемента.
		border-left-width - Устанавливает толщину границы слева от элемента.
	border-radius - Устанавливает радиус скругления уголков рамки.
		border-right - Позволяет одновременно установить толщину, стиль и цвет правой границы элемента.
		border-right-color - Задаёт цвет границы справа от элемента.
		border-right-style - Устанавливает стиль границы справа от элемента.
		border-right-width - Устанавливает толщину границы справа от элемента.
		border-style - Устанавливает стиль границы вокруг элемента.
		border-top - Позволяет одновременно установить толщину, стиль и цвет границы сверху элемента.
		border-top-color - Задает цвет границы сверху элемента.
		border-top-left-radius - Устанавливает радиус скругления левого верхнего уголка рамки.
		border-top-right-radius - Устанавливает радиус скругления правого верхнего уголка рамки.
		border-top-style - Устанавливает стиль границы сверху элемента.
		border-top-width - Устанавливает толщину границы сверху элемента.
		border-width - Задаёт толщину границы одновременно на всех сторонах элемента или индивидуально для каждой стороны.
	outline - Универсальное свойство, одновременно устанавливающее цвет, стиль и толщину внешней границы на всех четырёх сторонах элемента.
		outline-color - Задаёт цвет внешней границы элемента.
		outline-offset - Устанавливает расстояние между рамкой, созданной с помощью свойства outline, и краем или границей элемента добавленной через border.
		outline-style - Задаёт стиль внешней границы элемента.
		outline-width - Задаёт толщину внешней границы элемента.

--- КОНТЕНТ ---

	content - Позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально в тексте отсутствует.
	counter-increment - Предназначено для увеличения значения счётчика приращений, который задается свойством counter-reset.
	counter-reset - Устанавливает идентификатор, в котором будет храниться счетчик отображений определенного элемента, а также начальное значение счетчика.
	quotes - Устанавливает тип кавычек, который применяется в тексте документа.
	Псевдоэлемент ::after - Псевдоэлемент, который используется для вывода желаемого контента после элемента, к которому он добавляется.
	Псевдоэлемент ::before - Применяется для отображения желаемого контента до элемента, к которому он добавляется.

--- ПОЛЯ И ОТСТУПЫ ---

	margin - Устанавливает величину отступа от каждого края элемента.
		margin-bottom - Устанавливает величину отступа от нижнего края элемента.
		margin-left - Устанавливает величину отступа от левого края элемента.
		margin-right - Устанавливает величину отступа от правого края элемента.
		margin-top - Устанавливает величину отступа от верхнего края элемента.
	padding - Устанавливает значение полей вокруг содержимого элемента.
		padding-bottom - Устанавливает значение поля от нижнего края содержимого элемента.
		padding-left - Устанавливает значение поля от левого края содержимого элемента.
		padding-right - Устанавливает значение поля от правого края содержимого элемента.
		padding-top - Устанавливает значение поля от верхнего края содержимого элемента.

--- ПЕЧАТЬ ---

	@page - Задаёт значение полей при печати документа.
	marks - Отображает специальные метки на странице при печати документа, предназначенные для дальнейшего обрезания страницы или для ровного соединения нескольких листов между собой.
	orphans - Задаёт минимальное число строк текста, которое остается на предыдущей странице при печати документа.
	page-break-after - Добавляет разрыв страницы при печати документа после заданного элемента.
	page-break-before - Добавляет разрыв страницы при печати документа перед заданным элементом.
	page-break-inside - Разрешает или запрещает разрыв страницы внутри элемента при печати.
	widows - Задаёт минимальное число строк текста, которое располагается на следующей странице при печати документа.

--- ПОЗИЦИОНИРОВАНИЕ ---

	bottom - Устанавливает положение нижнего края содержимого элемента без учета толщины рамок и отступов.
	left - Устанавливает положение левого края содержимого элемента.
	position - Устанавливает способ позиционирования элемента относительно окна браузера или других объектов на веб-странице.
	right - Устанавливает положение правого края элемента.
	top - Устанавливает положение верхнего края содержимого элемента.
	z-index - Задаёт положение элементов по z-оси.

--- ПСЕВДОКЛАССЫ ---

	Псевдокласс :active - Определяет стиль активного элемента.
	Псевдокласс :checked - Применяется к элементам интерфейса, таким как переключатели (checkbox) и флажки (radio), когда они находятся в положение «включено».
	Псевдокласс :default - Применяет стиль к элементам форм, которые установлены по умолчанию в группе похожих элементов.
	Псевдокласс :disabled - Применяет стиль к заблокированным элементам форм.
	Псевдокласс :empty - Представляет пустые элементы, т. е. те, которые не содержат дочерних элементов, текста или пробелов.
	Псевдокласс :enabled - Используется для применения стиля к доступным (не заблокированным) элементам форм.
	Псевдокласс :first-child - Применяет стилевое оформление к первому дочернему элементу своего родителя.
	Псевдокласс :first-of-type - Задаёт правила стилей для первого элемента в списке дочерних элементов своего родителя.
	Псевдокласс :focus - Определяет стиль для элемента, получающего фокус.
	Псевдокласс :fullscreen - Псевдокласс :fullscreen применяется к элементам, когда браузер находится в полноэкранном режиме.
	Псевдокласс :hover - Определяет стиль элемента при наведении на него курсора мыши, но при этом элемент еще не активирован.
	Псевдокласс :in-range - Применяется к элементам форм, у которых введённое пользователем значение находится в заранее заданном диапазоне. Сам диапазон устанавливается с помощью атрибутов min и max, они, соответственно, задают минимальное и максимальное значение.
	Псевдокласс :indeterminate - Задаёт стиль для элементов форм, таким как флажки и переключатели, когда они находятся в неопределённом состоянии.
	Псевдокласс :invalid - Применяется к полям формы, содержимое которых не соответствует указанному типу.
	Псевдокласс :lang - Определяет язык, который используется в документе или его фрагменте.
	Псевдокласс :last-child - Задаёт стилевое оформление последнего элемента своего родителя.
	Псевдокласс :last-of-type - Задаёт правила стилей для последнего элемента в списке дочерних элементов своего родителя.
	Псевдокласс :link - Применяется к ссылкам, которые ещё не посещались пользователем.
	Псевдокласс :not - Задаёт правила стилей для элементов, которые не содержат указанный селектор.
	Псевдокласс :nth-last-child - Используется для добавления стиля к элементам на основе нумерации в дереве элементов.
	Псевдокласс :nth-last-of-type - Используется для добавления стиля к элементам указанного типа на основе нумерации в дереве элементов.
	Псевдокласс :nth-of-type - Используется для добавления стиля к элементам указанного типа на основе нумерации в дереве элементов.
	Псевдокласс :only-child - Применяется к дочерним элементам, только если он единственный у родителя.
	Псевдокласс :only-of-type - Применяется к дочерним элементам указанного типа, только если он единственный у родителя.
	Псевдокласс :optional - Применяет стилевые правила к полю формы, у которого не задан атрибут required.
	Псевдокласс :out-of-range - Применяется к полям форм, у которых введённое пользователем значение выходит из заданного диапазона. Псевдокласс работает только для тех полей, где пользователь может сам ввести значение, несмотря на ограничения.
	Псевдокласс :read-only - Применяется к полям формы, у которых задан атрибут readonly.
	Псевдокласс :read-write - Применяется к полям формы, доступных для изменения.
	Псевдокласс :required - Применяет стилевые правила к элементу input, у которого установлен атрибут required.
	Псевдокласс :target - Применяется к целевому элементу, иными словами, к идентификатору, который указан в адресной строке браузера.
	Псевдокласс :valid - Применяется к полям формы, содержимое которых проходит проверку в браузере на соответствие указанному типу.
	Псевдокласс :visited - Применяется к ссылкам, уже посещённым пользователем, и задаёт для них стилевое оформление.

--- ПСЕВДОЭЛЕМЕНТЫ ---

	Псевдоэлемент ::-ms-browse - Позволяет задать стиль кнопки «Обзор» при загрузке файлов.
	Псевдоэлемент ::-ms-check - Задаёт стиль переключателей и флажков в Internet Explorer.
	Псевдоэлемент ::-ms-clear - Задаёт стиль кнопки для очистки текстового поля. Исходно эта кнопка не видна, она появляется в правой части поля только при вводе текста.
	Псевдоэлемент ::-ms-expand - Задаёт стиль кнопки раскрытия списка формы в браузере Internet Explorer.
	Псевдоэлемент ::-ms-fill - Задаёт стиль индикатора прогресса в браузере Internet Explorer. Само значение индикатора и его положение меняется динамически посредством скриптов.
	Псевдоэлемент ::-ms-reveal - Задаёт стиль кнопки для просмотра пароля в поле формы. Кнопка исходно не видна и появляется в правой части поля при вводе пароля.
	Псевдоэлемент ::-ms-value - Позволяет изменять стиль элементов формы в браузере Internet Explorer.
	Псевдоэлемент ::after - Псевдоэлемент, который используется для вывода желаемого контента после элемента, к которому он добавляется.
	Псевдоэлемент ::backdrop - Псевдоэлемент отображается ниже самого верхнего элемента в стеке по оси Z, но выше всех остальных элементов на странице, если они имеются. Обычно применяется для затемнения страницы, чтобы акцентировать внимание на фотографии или диалоговом окне, которые выводятся поверх такого затемнения.
	Псевдоэлемент ::before - Применяется для отображения желаемого контента до элемента, к которому он добавляется.
	Псевдоэлемент ::first-letter - Определяет стиль первого символа в тексте элемента, к которому добавляется.
	Псевдоэлемент ::first-line - Задаёт стиль первой строки форматированного текста.
	Псевдоэлемент ::placeholder - Псевдоэлемент, с помощью которого задаётся стилевое оформление подсказывающего текста, созданного атрибутом placeholder.
	Псевдоэлемент ::selection - Применяет стиль к выделенному пользователем фрагменту текста.

--- РАЗМЕРЫ ---

	box-sizing - Применяется для изменения алгоритма расчёта ширины и высоты элемента.
	height - Устанавливает высоту блочных или заменяемых элементов.
	max-height - Устанавливает максимальную высоту элемента.
	max-width - Устанавливает максимальную ширину элемента.
	min-height - Задает минимальную высоту элемента.
	min-width - Устанавливает минимальную ширину элемента.
	width - Устанавливает ширину блочных или заменяемых элементов.

--- СПИСКИ ---

	list-style - Универсальное свойство, позволяющее одновременно задать стиль маркера, его положение, а также изображение маркера.
	list-style-image - Устанавливает адрес изображения, которое служит в качестве маркера списка.
	list-style-position - Определяет, как будет размещаться маркер относительно текста.
	list-style-type - Изменяет вид маркера для каждого элемента списка.

--- ТАБЛИЦЫ ---

	border-collapse - Устанавливает, как отображать границы вокруг ячеек таблицы.
	border-spacing - Задаёт расстояние между границами ячеек в таблице.
	caption-side - Определяет положение заголовка таблицы, который задается с помощью тега <caption>.
	empty-cells - Задаёт отображение границ и фона в ячейке, если она пустая.
	table-layout - Определяет, как браузер должен вычислять ширину ячеек таблицы, основываясь на ее содержимом.

--- ТЕКСТ И ШРИФТ ---

	@font-face - Определяет настройки шрифтов, а также позволяет загрузить специфичный шрифт на компьютер пользователя.
	direction - Свойство предназначено для сайтов, в которых имеет значение направление текста.
	font - Универсальное свойство, которое позволяет одновременно задать несколько характеристик шрифта и текста.
	font-family - Устанавливает семейство шрифта, которое будет использоваться для оформления текста содержимого.
	font-kerning - Управляет кернингом шрифта. Кернинг — это изменение интервала между определёнными сочетаниями букв для сохранения плотности букв в тексте. Это особенно важно для букв, у которых есть наклонные линии, вроде А, У, W, V.
	font-size - Определяет размер шрифта элемента.
	font-stretch - Устанавливает узкое, нормальное или широкое начертание шрифта, что позволяет уплотнять или расширять текст.
	font-style - Определяет начертание шрифта — обычное, курсивное или наклонное.
	font-variant - Определяет, как нужно представлять строчные буквы — оставить их без модификаций или делать их все прописными уменьшенного размера.
	font-weight - Устанавливает насыщенность шрифта.
	hyphens - Сообщает браузеру, как расставлять переносы слов в блоке текста. Словарь переносов хранится в браузере и подключается только при наличии атрибута lang с кодом языка.
	letter-spacing - Определяет интервал между символами в пределах элемента.
	line-height - Устанавливает интерлиньяж (межстрочный интервал) текста, отсчёт ведётся от базовой линии шрифта.
	tab-size - Используется для изменения ширины отступа, заданного с помощью символа табуляции.
	text-align - Определяет горизонтальное выравнивание текста в пределах элемента.
	text-align-last - Задаёт выравнивание последней строки текста, когда свойство text-align установлено как justify.
	text-decoration - Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания.
	text-decoration-color - Устанавливает цвет линии, которая добавляется через свойство <span class="attribute">text-decoration</span>.
	text-decoration-line - Определяет, как должна добавляться декоративная линия к тексту — подчеркивание, перечеркивание, над текстом. Одновременно можно добавлять несколько линий, перечисляя значения через пробел.
	text-decoration-style - Устанавливает стиль декоративной линии, которая добавляется к тексту через свойство text-decoration или text-decoration-line.
	text-indent - Устанавливает величину отступа первой строки блока текста.
	text-overflow - Определяет параметры видимости текста в блоке, если текст целиком не помещается в заданную область.
	text-shadow - Добавляет тень к тексту, а также устанавливает её параметры.
	text-transform - Управляет преобразованием текста элемента в заглавные или прописные символы.
	unicode-bidi - Задаёт, как должен располагаться текст.
	white-space - Устанавливает, как отображать пробелы между словами.
	word-break - Свойство word-break указывает, как делать перенос строк внутри слов, которые не помещаются по ширине в заданную область.
	word-spacing - Устанавливает интервал между словами.
	word-wrap - Указывает, переносить или нет длинные слова, которые не помещаются по ширине в заданную область.
	writing-mode - Устанавливает направление текста на странице.
	Псевдоэлемент ::first-letter - Определяет стиль первого символа в тексте элемента, к которому добавляется.
	Псевдоэлемент ::first-line - Задаёт стиль первой строки форматированного текста.
	Псевдоэлемент ::selection - Применяет стиль к выделенному пользователем фрагменту текста.

--- ФЛЕКСЫ ---

	align-content - Выравнивает строки внутри флекс-контейнера при наличии свободного пространства по вертикальной оси.
	align-items - Выравнивает флекс-элементы по вертикальной оси внутри контейнера.
	align-self - Задаёт выравнивание отдельного элемента в контейнере по поперечной оси.
	flex-basis - Свойство flex-basis определяет основу флекса, которая является начальным размером элемента.
	flex-direction - Свойство flex-direction определяет, как флексы располагаются в контейнере относительно основных осей и их направление.

--- ФОРМАТИРОВАНИЕ ---

	all - Универсальное свойство, которое сбрасывает все значения свойств в исходные или наследуемые, за исключением свойств direction и unicode-bidi.
	clear - Устанавливает, с какой стороны элемента запрещено его обтекание другими элементами.
	clip - Определяет область позиционированного элемента, в которой будет показано его содержимое.
	display - Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе.
	float - Определяет, по какой стороне будет выравниваться элемент, при этом остальные элементы будут обтекать его с других сторон.
	overflow - Управляет отображением содержания элемента, если оно целиком не помещается в область заданных размеров.
	overflow-x - Управляет отображением содержания блочного элемента по горизонтали.
	overflow-y - Управляет отображением содержания блочного элемента по вертикали, если контент целиком не помещается и выходит за область сверху или снизу от блока.
	vertical-align - Выравнивает элемент по вертикали относительно своего родителя, окружающего текста или ячейки таблицы.
	visibility - Предназначен для отображения или скрытия элемента.

--- ФОРМЫ ---

	Псевдокласс :checked - Применяется к элементам интерфейса, таким как переключатели (checkbox) и флажки (radio), когда они находятся в положение «включено».
	Псевдокласс :default - Применяет стиль к элементам форм, которые установлены по умолчанию в группе похожих элементов.
	Псевдокласс :disabled - Применяет стиль к заблокированным элементам форм.
	Псевдокласс :enabled - Используется для применения стиля к доступным (не заблокированным) элементам форм.
	Псевдокласс :in-range - Применяется к элементам форм, у которых введённое пользователем значение находится в заранее заданном диапазоне. Сам диапазон устанавливается с помощью атрибутов min и max, они, соответственно, задают минимальное и максимальное значение.
	Псевдокласс :invalid - Применяется к полям формы, содержимое которых не соответствует указанному типу.
	Псевдокласс :optional - Применяет стилевые правила к полю формы, у которого не задан атрибут required.
	Псевдокласс :out-of-range - Применяется к полям форм, у которых введённое пользователем значение выходит из заданного диапазона. Псевдокласс работает только для тех полей, где пользователь может сам ввести значение, несмотря на ограничения.
	Псевдокласс :read-only - Применяется к полям формы, у которых задан атрибут readonly.
	Псевдокласс :read-write - Применяется к полям формы, доступных для изменения.
	Псевдокласс :required - Применяет стилевые правила к элементу input, у которого установлен атрибут required.
	Псевдокласс :valid - Применяется к полям формы, содержимое которых проходит проверку в браузере на соответствие указанному типу.
	Псевдоэлемент ::-ms-browse - Позволяет задать стиль кнопки «Обзор» при загрузке файлов.
	Псевдоэлемент ::-ms-check - Задаёт стиль переключателей и флажков в Internet Explorer.
	Псевдоэлемент ::-ms-clear - Задаёт стиль кнопки для очистки текстового поля. Исходно эта кнопка не видна, она появляется в правой части поля только при вводе текста.
	Псевдоэлемент ::-ms-expand - Задаёт стиль кнопки раскрытия списка формы в браузере Internet Explorer.
	Псевдоэлемент ::-ms-fill - Задаёт стиль индикатора прогресса в браузере Internet Explorer. Само значение индикатора и его положение меняется динамически посредством скриптов.
	Псевдоэлемент ::-ms-reveal - Задаёт стиль кнопки для просмотра пароля в поле формы. Кнопка исходно не видна и появляется в правой части поля при вводе пароля.
	Псевдоэлемент ::-ms-value - Позволяет изменять стиль элементов формы в браузере Internet Explorer.

--- ЦВЕТ И ФОН ---

	background - Универсальное свойство позволяет установить одновременно до пяти характеристик фона.
	background-clip - Определяет, как цвет фона или фоновая картинка должна выводиться под границами.
	background-color - Определяет цвет фона элемента.
	background-image - Устанавливает фоновое изображение для элемента.
	background-origin - Определяет область позиционирования фонового рисунка.
	background-position - Задаёт начальное положение фонового изображения, установленного с помощью свойства background-image.
	background-repeat - Определяет, как будет повторяться фоновое изображение, установленное с помощью свойства background-image.
	background-size - Масштабирует фоновое изображение согласно заданным размерам.
	color - Определяет цвет текста элемента.
	linear-gradient() - Создаёт линейный градиент — плавный переход от одного цвета к другому.
	radial-gradient() - Добавляет радиальный градиент к фону элемента.
	repeating-linear-gradient() - Создаёт повторяющийся линейный градиент.
	repeating-radial-gradient() - По своему действию похож на радиальный градиент, который делается функцией radial-gradient(), но бесконечно повторяются во всех направлениях.
	{}




### @-правила (regulations) ###

	@charset -> Применяется для задания кодировки внешнего CSS-файла. Это имеет значение в том случае, если в CSS-файле используются символы национального алфавита.
		/* @charset "кодировка"; */ 
		@charset "windows-1251";	/*Рускоязычная кодировка */ 

	@document -> устанавливает стилевые правила на основе адреса документа. К примеру, если адреса мобильной и основной версии сайта различаются, то мы можем задать собственный стиль элементов для каждой версии.
		/* @document [url(&lt;адрес>) [, url-prefix(&lt;адрес>)][, domain(&lt;адрес>)][, regexp(&lt;адрес>)] ] {Стилевые правила} */ 
		.ssl {
    		display: none; 
   		}
   		@-moz-document regexp("https:.") {
	    	.ssl {
	     	display: block;
	     	background: #5bd4b6;
	     	color: #fff;
	     	padding: 20px;
    		}
    	}

	@font-face -> Определяет настройки шрифтов, а также позволяет загрузить специфичный шрифт на компьютер пользователя.
		/* @font-face { свойства шрифта } */
		@font-face {				/*Настройки шрифта*/
		    font-family: Pompadur; /* Имя шрифта */
		    src: url(fonts/pompadur.ttf); /* Путь к файлу со шрифтом */
		}

	@import -> Позволяет импортировать содержимое CSS-файла в текущую стилевую таблицу. {}
		/* @import url("имя файла") [типы носителей]; */
		/* @import "имя файла" [типы носителей]; */

		@import url("имя файла") [типы носителей, ожно пропустить]; /*Подключение стиля с инета*/
		@import "имя файла" [типы носителей, можно пропустить]; /*Подключение стиля из файла*/

	@keyframes -> @keyframes устанавливает ключевые кадры при анимации элемента. Ключевой кадр это свойства элемента (прозрачность, цвет, положение и др.), которые должны применяться к элементу в заданный момент времени. {}
		/* @keyframes <переменная> { [ from | to | <проценты> ] [, from | to | <проценты> ]* } */
		@keyframes box {
		 50% { left: 0; }
		 90% { left: 300px; }
		}

	@media -> Указывает тип носителя, для которого будет применяться указанный стиль. В качестве типов выступают различные устройства, например, принтер, коммуникатор, монитор и др. {}
		/* @media <тип носителя> {Описание стиля} */
		@media screen { /* Стиль для отображения в браузере */
			.class { 
				стили
			}
		}

	@page -> Задает значение полей при печати документа.
		/*@page [ { :left | :right | :first } ] { Значения отступов } */
		@media print { /* Стиль для печати */
		    body {
		     font-family: Times, 'Times New Roman', serif; /* Шрифт с засечками */
		    }
		    h1, h2, p {
		     color: #000; /* Черный цвет текста */
		    }
		}
		@page :first {
		margin: 1cm; /* Отступы для первой страницы */ 
		}
		@page :left {
		margin: 1cm 3cm 1cm 1.5cm; /* Отступы для всех левых страниц */ 
		}
		@page :right {
		margin: 1cm 3cm 1cm 1.5cm; /* Отступы для всех правых страниц */ 
		}

	@viewport -> Позволяет оптимизировать макет веб-страницы в зависимости от различных устройств и их размеров.
		/* @viewport {<дескриптор>: <значение>;} */
		@viewport {
    		width: device-width;
    		zoom: 1;
    		max-zoom: 2;
   		}

### АНИМАЦИЯ ### 

	animation -> Универсальное свойство которое задаёт сразу несколько параметров анимации.
		/* animation: animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction;
		Значения по умолчанию:     
			animation-name: none
			animation-duration: 0s
			animation-timing-function: ease
			animation-delay: 0s
			animation-iteration-count: 1
			animation-direction: normal
			animation-fill-mode: none
			animation-play-state: running */
		animation: none, 0s, ease, 0s, 1, normal, none, runing;

	animation-delay -> Устанавливает время ожидания перед воспроизведением анимации.
		/* animation-delay: <время> */ 
		-webkit-animation-delay: 1s; /* Воемя ожидания в 1с. -> */
	    -moz-animation-delay: 1s;
	    -o-animation-delay: 1s;
	    animation-delay: 1s; /* <- */

	animation-direction -> Устанавливает направление движения анимации.
		/* animation-direction: normal | alternate | reverse | alternate-reverse */
	    animation-direction: normal; /* Анимация идёт с самого начала, после завершения цикла возвращается к исходному состоянию. -> */
	    -webkit-animation-direction: normal; /* <- */
	    animation-direction: alternate; /* Анимация идёт с начала до конца, затем плавно возвращается в исходное положение. */
		animation-direction: reverse; /* Анимация идёт с конца цикла, после его завершения возвращается к исходному состоянию. */
	    animation-direction: alternate-reverse; /* Анимация идёт с конца до начала, затем плавно возвращается в исходное положение. */

	animation-duration -> Задаёт время в секундах или миллисекундах, сколько должна длиться анимация движения.
		/* animation-duration: <время> */
		animation-duration: 1s; /* Анимация длинной в 1 секунду */

	animation-fill-mode -> Определяет, какие стили должны применяться к элементу, когда анимация не проигрывается. Например, после её завершения или при остановке
		/* animation-fill-mode: none | forwards | backwards | both */	
		animation-fill-mode: none; /* К элементу не применяются какие-либо стили. */
		animation-fill-mode: forwards; /* К элементу по окончанию анимации применяется стиль последнего ключевого кадра. (см. animation-direction и animation-iteration-count)*/
		animation-fill-mode: backwards; /* К элементу применяется стиль первого ключевого кадра (см. animation-direction) */
		animation-fill-mode: both; /* К элементу применяются оба правила, как для forwards, так и для backwards. */

	animation-iteration-count -> Устанавливает, сколько раз должен проигрываться анимационный цикл до остановки.
		/* animation-iteration-count: infinite | <число> */	
		animation-iteration-count: infinite; 	/* бесконечный */
		animation-iteration-count: 10; 			/* 10 раз*/

	animation-name -> Устанавливает одну или несколько анимаций, которые применяются к элементу.
		/* animation-name: none | <идентификатор> [, none | <идентификатор>]* */

		animation-name: none; /* Отключает анимацию */

		-webkit-animation-name: spaceOutUp; /* Применение стилей к spaceOutUp -> */
		animation-name: spaceOutUp;
		@-webkit-keyframes spaceOutUp {
	    from {
	    	...
	    }
		@keyframes spaceOutUp {
	    from {
	    	...
	    } /* <- */

	animation-play-state -> Свойство определяет, проигрывать анимацию или поставить её на паузу.
		/* animation-play-state: running | paused */
		animation-play-state: running;	/* Запустить анимацию */
		animation-play-state: paused;	/* Поставить на паузу */

	animation-timing-function -> Устанавливает, по какой зависимости должна происходить анимация каждого цикла.
		/* animation-timing-function: ease | ease-in | ease-out | ease-in-out | linear | step-start | step-end | steps | cubic-bezier */
		animation-timing-function: linear; 	/* Одинаковая скорость от начала и до конца. -> */
		-webkit-animation-timing-function: linear; /* <- */
		animation-timing-function: ease; /* Анимация начинается медленно, затем ускоряется и к концу движения опять замедляется. */
		animation-timing-function: ease-in; /* Анимация медленно начинается, к концу ускоряется. Аналогично cubic-bezier(0.42,0,1,1). */
		animation-timing-function: ease-out; /* Анимация начинается быстро, к концу замедляется. Аналогично cubic-bezier(0,0,0.58,1). */
		animation-timing-function: ease-in-out; /* Анимация начинается и заканчивается медленно. Аналогично cubic-bezier(0.42,0,0.58,1). */
		animation-timing-function: step-start; /* Как таковой анимации нет. Стилевые свойства сразу же принимают конечное значение. */
		animation-timing-function: step-end; /* Как таковой анимации нет. Стилевые свойства находятся в начальном значении заданное время, затем сразу же принимают конечное значение. */
		animation-timing-function: steps(<число>, start | end) /* Ступенчатая функция, имеющая заданное число шагов. start — задаёт полунепрерывную снизу функцию. end — задаёт полунепрерывную сверху функцию.*/
		animation-timing-function: cubic-bezier; /* Задаёт функцию движения в виде кривой Безье */

	transition -> Универсальное свойство, которое определяет эффект перехода между двумя состояниями элемента, они могут быть установлены с помощью псевдоэлемента :hover или :active, а также динамически через JavaScript.
		/* transition: <переход> 
			<переход> = [ none | <transition-property> ] || <transition-duration> || <transition-timing-function> || <transition-delay>*/
	    -webkit-transition: top 1s ease-out 0.5s;
	    -moz-transition: top 1s ease-out 0.5s;
	    -o-transition: top 1s ease-out 0.5s;
	    transition: top 1s ease-out 0.5s;

	transition-delay -> Устанавливает время ожидания перед запуском эффекта анимации перехода.
		/* transition-delay: <время> */
		-webkit-transition-delay: 0.5s; /* Время ожидания перед запуском в 0.5с -> */
		-o-transition-delay: 0.5s;
		-moz-transition-delay: 0.5s;
		transition-delay: 0.5s; /* <- */

	transition-duration -> Задаёт время в секундах или миллисекундах, сколько должна длиться анимация перехода до её завершения.
		/* transition-duration: <время> */
		-webkit-transition-duration: 2s; /* Устанавливаем продолжительность анимации в 2с. -> */
	    -o-transition-duration: 2s;
	    -moz-transition-duration: 2s;
	    transition-duration: 2s; /* <- */

	transition-property -> Устанавливает имя стилевого свойства, значение которого будет отслеживаться для создания эффекта перехода.
		/* transition-property: none | all | <свойство> */
	    transition-property: top; /* Задаём свойство top. Если их много перечисляем через запятую. */
	    -webkit-transition-property: top;
	    -moz-transition-property: top;
	    -o-transition-property: top; /* <- */
	    transition-property: none; /* Никакое свойство не задано. */
	    transition-property: all; /* Все свойства будут отслеживаться. */

	transition-timing-function -> Устанавливает, насколько быстро должно изменяться значение стилевого свойство для которого применяется эффект перехода.
		/* transition-timing-function: ease | ease-in | ease-out | ease-in-out | linear | step-start | step-end | steps | cubic-bezier */
		transition-timing-function: ease; /* Анимация начинается медленно, затем ускоряется и к концу движения опять замедляется. Аналогично cubic-bezier(0.25,0.1,0.25,1).*/
		transition-timing-function: ease-in; /* Анимация медленно начинается, к концу ускоряется. Аналогично cubic-bezier(0.42,0,1,1). */
		transition-timing-function: ease-out; /* Анимация начинается быстро, к концу замедляется. Аналогично cubic-bezier(0,0,0.58,1). */
		transition-timing-function: ease-in-out; /* Анимация начинается и заканчивается медленно. Аналогично cubic-bezier(0.42,0,0.58,1). */
		transition-timing-function: linear; /* Одинаковая скорость от начала и до конца. */
		transition-timing-function: step-start; /* Как таковой анимации нет. Стилевые свойства сразу же принимают конечное значение. */
		transition-timing-function: step-end; /* Как таковой анимации нет. Стилевые свойства находятся в начальном значении заданное время, затем сразу же принимают конечное значение. */
		transition-timing-function: steps(<число>, start | end) /* Ступенчатая функция, имеющая заданное число шагов. start — задаёт полунепрерывную снизу функцию. end — задаёт полунепрерывную сверху функцию.*/
		transition-timing-function: cubic-bezier; /* Задаёт функцию движения в виде кривой Безье */

### ГРАНИЦЫ ###

	border -> Позволяет одновременно установить толщину, стиль и цвет границы вокруг элемента.
		/* border: border-width || border-style || border-color */
		border: 4px double black; /* Параметры границы */
		
	border-bottom -> Позволяет одновременно установить толщину, стиль и цвет границы внизу элемента.
		/* border-bottom: [border-bottom-width || border-bottom-style || border-bottom-color] */
		border-bottom: 2px solid white; /* Параметры линии внизу */

	border-bottom-color -> Устанавливает цвет границы внизу элемента.
		/* border-bottom-color: <цвет> | transparent */
		border-bottom-color: #333333, ; /* Придать границе темный серый цвет */

	border-bottom-left-radius -> Устанавливает радиус скругления левого нижнего уголка рамки.
		/* border-bottom-left-radius: [значение | проценты] [значение | проценты] */
		border-bottom-left-radius: 70px 40px; /* скруглить нижний левый угл рамки, одну сторону на 70 другую на 40, если одно число то прим к обеим сторонам.*/

	border-bottom-right-radius -> Устанавливает радиус скругления правого нижнего уголка границы.
		/* border-bottom-right-radius: [значение | проценты] [значение | проценты] */
		border-bottom-right-radius: 70px 40px: /* скруглить нижний правый угл рамки, одну сторону больше чем другую, если одно значение то применяется к обеим сторонам. */

	border-bottom-style -> Устанавливает стиль границы внизу элемента.
		/* border-bottom-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset */
		border-bottom-style: none; /* Линия не отображается и значение её толщины обнуляется. */
		border-bottom-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		border-bottom-style: dotted; /* Линия состоящая из набора точек. */
		border-bottom-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		border-bottom-style: solid; /* Сплошная линия. */
		border-bottom-style: double; /* Двойная линия. */
		border-bottom-style: groove; /* Создает эффект вдавленной линии. */
		border-bottom-style: ridge; /* Создает эффект рельефной линии. */
		border-bottom-style: inset; /* Псевдотрехмерная линия. */
		border-bottom-style: outset; /* Псевдотрехмерная линия. */

	border-bottom-width -> Устанавливает толщину границы внизу элемента.
		/* border-bottom-width: значение | thin | medium | thick */
		border-bottom-width: 1px;	/* Толщина нижний границы 1 пикселя */
		border-bottom-width: thin; /* Толщина нижний границы 2 пикселя */
		border-bottom-width: medium; /* Толщина нижний границы 4 пикселя */
		border-bottom-width: thick; /* Толщина нижний границы 6 пикселя */

	border-color -> Устанавливает цвет границы на разных сторонах элемента.
		/* border-color: [<цвет> | transparent] {1,4} */
		border-color: #008a77; /* Цвет 4 границ */

	border-image -> Используется для отображения рисованной рамки вокруг элемента.
		/* border-image: none | [ <URL> [<число> | <проценты>]{1,4} [/ <толщина>{1,4}]? ] && [stretch | repeat | round]{0,2} */
		border-image: url(image/bg-image.png) none; /*Не отображает рисованную рамку, используется установленный стиль границы.*/
		border-image: url(image/bg-image.png) 30 round; /*Повторяет рисунок и масштабирует его так, чтобы на стороне элемента оказалось целое число изображений.*/
		border-image: url(image/bg-image.png) 40 repeat; /*Повторяет рисунок границы.*/
		border-image: url(image/bg-image.png) 50% stretch; /*Растягивает рисунок границы до размеров элемента. Это значение используется по умолчанию.*/

	border-left -> Позволяет одновременно установить толщину, стиль и цвет левой границы элемента.
		/* border-left: [border-left-width || border-left-style || border-left-color] */
		border-left: 2px dotted green; /* Левая линия рамки, 2px, в точечку, зелёного цвета */

	border-left-color -> Задаёт цвет границы слева от элемента.
		/* border-left-color: <цвет> | transparent */
		border-left-color: #fc0; /* Цвет линии слева */
		
	border-left-style -> Устанавливает стиль границы слева от элемента.
		/* border-left-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset */
		border-left-style: none; /* Линия не отображается и значение её толщины обнуляется. */
		border-left-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		border-left-style: dotted; /* Линия состоящая из набора точек. */
		border-left-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		border-left-style: solid; /* Сплошная линия. */
		border-left-style: double; /* Двойная линия. */
		border-left-style: groove; /* Создает эффект вдавленной линии. */
		border-left-style: ridge; /* Создает эффект рельефной линии. */
		border-left-style: inset; /* Псевдотрехмерная линия. */
		border-left-style: outset; /* Псевдотрехмерная линия. */

	border-left-width -> Устанавливает толщину границы слева от элемента.
		/* border-left-width: <размер> | thin | medium | thick */
		border-left-width: 1px;	/* Толщина границы 1 пикселя */
		border-left-width: thin; /* Толщина границы 2 пикселя */
		border-left-width: medium; /* Толщина границы 4 пикселя */
		border-left-width: thick; /* Толщина границы 6 пикселя */

	border-radius -> Устанавливает радиус скругления уголков рамки.
		/* border-radius: <радиус>{1,4} [ / <радиус>{1,4}] */
		border-radius: 50px 0 0 50px;
		border-radius: 13em/3em;
		border-radius: 13em 0.5em/1em 0.5em;
		border-radius: 8px;

	border-right -> Позволяет одновременно установить толщину, стиль и цвет правой границы элемента.
		/* border-right: [border-right-width || border-right-style || border-right-color] */
		border-right: 1px solid red; /* Линия справа: толщина 1px, сплошная, красная */

	border-right-color -> Задаёт цвет границы справа от элемента.
		/* border-right-color: <цвет> | transparent */
		border-right-color: #123456; /* Цвет линии справа */

	border-right-style -> Устанавливает стиль границы справа от элемента.
		/* border-right-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset */
		border-left-style: none; /* Линия не отображается и значение её толщины обнуляется. */
		border-left-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		border-left-style: dotted; /* Линия состоящая из набора точек. */
		border-left-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		border-left-style: solid; /* Сплошная линия. */
		border-left-style: double; /* Двойная линия. */
		border-left-style: groove; /* Создает эффект вдавленной линии. */
		border-left-style: ridge; /* Создает эффект рельефной линии. */
		border-left-style: inset; /* Псевдотрехмерная линия. */
		border-left-style: outset; /* Псевдотрехмерная линия. */

	border-right-width -> Устанавливает толщину границы справа от элемента.
		/* border-right-width: <размер> | thin | medium | thick */
		border-right-width: 1px;	/* Толщина границы 1 пикселя */
		border-right-width: thin; /* Толщина границы 2 пикселя */
		border-right-width: medium; /* Толщина границы 4 пикселя */
		border-right-width: thick; /* Толщина границы 6 пикселя */

	border-style -> Устанавливает стиль границы вокруг элемента.
		/* border-style: [none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset] {1,4} */
		border-left-style: none; /* Линия не отображается и значение её толщины обнуляется. */
		border-left-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		border-left-style: dotted; /* Линия состоящая из набора точек. */
		border-left-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		border-left-style: solid; /* Сплошная линия. */
		border-left-style: double; /* Двойная линия. */
		border-left-style: groove; /* Создает эффект вдавленной линии. */
		border-left-style: ridge; /* Создает эффект рельефной линии. */
		border-left-style: inset; /* Псевдотрехмерная линия. */
		border-left-style: outset; /* Псевдотрехмерная линия. */

	border-top -> Позволяет одновременно установить толщину, стиль и цвет границы сверху элемента.
		/* border-top: [border-top-width || border-top-style || border-top-color] */
		border-top: 2px solid #95cd8b; /* Линия сверху текста: толщина 2пикселя, сплошная, какогото цвета; */
		border-top-width: thin; /* Толщина границы 2 пикселя */
		border-top-width: medium; /* Толщина границы 4 пикселя */
		border-top-width: thick; /* Толщина границы 6 пикселя */

	border-top-color -> Задает цвет границы сверху элемента.
		/* border-top-color: <цвет> | transparent */
		 border-top-color: #ccc; /* Цвет линии сверху */
		
	border-top-left-radius -> Устанавливает радиус скругления левого верхнего уголка рамки.
		/* border-top-left-radius: [<размер> | <проценты>] [<размер> | <проценты>] */
		border-top-left-radius: 10px; /* Скругление левого верхнего угла рамки */
		
	border-top-right-radius -> Устанавливает радиус скругления правого верхнего уголка рамки.
		/* border-top-right-radius: [<размер>| <проценты>] [<размер> | <проценты>] */
		border-top-right-radius: 10px; /* Скругление правого верхнего угла рамки */

	border-top-style -> Устанавливает стиль границы сверху элемента.
		/* border-top-style: none|hidden|dotted|dashed|solid|double|groove|ridge|inset|outset */
		border-top-style: none; /* Линия не отображается и значение её толщины обнуляется. */
		border-top-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		border-top-style: dotted; /* Линия состоящая из набора точек. */
		border-top-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		border-top-style: solid; /* Сплошная линия. */
		border-top-style: double; /* Двойная линия. */
		border-top-style: groove; /* Создает эффект вдавленной линии. */
		border-top-style: ridge; /* Создает эффект рельефной линии. */
		border-top-style: inset; /* Псевдотрехмерная линия. */
		border-top-style: outset; /* Псевдотрехмерная линия. */

	border-top-width -> Устанавливает толщину границы сверху элемента.
		/* border-top-width: <размер> | thin | medium | thick */
		border-top-width: 7px; /* Толщина линии сверху */
		border-top-width: thin; /* Толщина границы 2 пикселя */
		border-top-width: medium; /* Толщина границы 4 пикселя */
		border-top-width: thick; /* Толщина границы 6 пикселя */

	border-width -> Задаёт толщину границы одновременно на всех сторонах элемента или индивидуально для каждой стороны.
		/* border-width: [<размер> | thin | medium | thick] {1,4} */
		border-width: 3px 7px 7px 4px; /* Толщина границы */
		border-width: thin thin medium thick; /* Толщина границы 2 пикселя, 2, 4, и 6 пикселей */
		border-width: medium; /* Толщина границы 4 пикселя */
		border-width: thick; /* Толщина границы 6 пикселя */

	outline -> Универсальное свойство, одновременно устанавливающее цвет, стиль и толщину внешней границы на всех четырёх сторонах элемента.
		/* outline: outline-color || outline-style || outline-width */
		outline: 1px solid #666; /* Параметры рамки */

	outline-color -> Задаёт цвет внешней границы элемента.
		/* outline-color: invert | <цвет> */
		outline-color: #be8b5e; /* Цвет границы */
		outline-color: invert; /* Цвет границы, автоматический, противоложный фону, максимальной контрастности*/

	outline-offset -> Устанавливает расстояние между рамкой, созданной с помощью свойства outline, и краем или границей элемента добавленной через border.
		/* outline-offset: <размер> */
		outline-offset: -10px; /* Выводим рамку внутри элемента */

	outline-style -> Задаёт стиль внешней границы элемента.
		/* outline-style: none | dotted | dashed | solid | double | groove | ridge | inset | outset */
		outline-style: none; /* Убираем границу вокруг ссылок */ 
		outline-style: hidden; /* Подобно None за исключ, если у табл значение будет Border-collapse:collapse тогда граница отображатся не будет.; */
		outline-style: dotted; /* Линия состоящая из набора точек. */
		outline-style: dashed; /* Пунктирная линия, состоящая из серии коротких отрезков. */
		outline-style: solid; /* Сплошная линия. */
		outline-style: double; /* Двойная линия. */
		outline-style: groove; /* Создает эффект вдавленной линии. */
		outline-style: ridge; /* Создает эффект рельефной линии. */
		outline-style: inset; /* Псевдотрехмерная линия. */
		outline-style: outset; /* Псевдотрехмерная линия. */

	outline-width -> Задаёт толщину внешней границы элемента.
		/* outline-width: thin | medium | thick | <размер> */
		outline-width: 3px; /* Толщина внешней границы */

### КОНТЕНТ ###

	content -> Позволяет вставлять генерируемое содержание в текст веб-страницы, которое первоначально в тексте отсутствует.
		/* content: <строка> | attr(<атрибут>) | open-quote | close-quote | no-open-quote | no-close-quote | url | counter | normal | none */
		content: open-quote; /* Добавляем перед текстом открывающую кавычку */
		content: close-quote; /* Добавляем после текста закрывающую кавычку */
		content: no-open-quotes; /* Отменяет добавление открывающей кавычки. */
	 	content: no-close-quote; /* Отменяет добавление закрывающей кавычки */
	 	content: none; /* Не добавляет никакого содержимого. */
		content: normal; /* Задаётся как none для псевдоэлементов ::before и ::after. */
		
		==>  url /* Абсолютный или относительный адрес вставляемого объекта. Если указанный файл браузер не может отобразить, то значение игнорируется. -> */
			p:before 
			{
				content:url(smiley.gif);
		} <== url

	    ==> counter /* Выводит значение счётчика, заданного свойством counter-reset. -> */
		    body { counter-reset: section; }     /*инициализируем два счетчика*/
		    h1 { counter-reset: subsection; }
		    h1:before {
		      counter-increment: section 1;    /*определяем инкремент для разделов*/
		      content: "Раздел " counter(section) ". ";
		    }
		    h2:before {
		      counter-increment: subsection 1; /*определяем инкремент для подразделов*/
		      content: counter(section) "." counter(subsection) " ";
		    } 
		    ...
		    <body>
			  	<h1>Самоучитель HTML</h1>
			  	<h2>Справочник HTML</h2>
			  	<h2>Самоучитель XHTML</h2>
			  	<h2>Самоучитель CSS</h2>
			  	<h1>Программирование</h1>
			  	<h2>JavaScript</h2>
			  	<h2>VBScript</h2>
			  	<h1>Самоучитель XML</h1>
			  	<h2>XML</h2>
			  	<h2>XSL</h2>
			</body>
		<== end counter

	counter-increment -> Предназначено для увеличения значения счётчика приращений, который задается свойством counter-reset.
		/* counter-increment: none | <переменная> | <число> */
		
		==> counter-increment /* -> */
			body {
		    	counter-reset: heading; /* Инициируем счетчик */
		   	}
		   		h2:before {
		    	counter-increment: heading; /* Указываем идентификатор счетчика */
		    	content: "Глава " counter(heading) ". "; /* Выводим текст перед содержимым тега <h2> */
		   	}
		   	...
		   	<body>
				<h2>Теория ловли льва в пустыне</h2>
				<h2>Методы инверсной кинематики</h2>
				<h2>Ловля льва численными методами</h2>
			</body>
		<== end counter-increment 

	counter-reset -> Устанавливает идентификатор, в котором будет храниться счетчик отображений определенного элемента, а также начальное значение счетчика.
		/* counter-reset: none | <переменная> | <число> */
		==> counter-reset /* -> */
			li { list-style-type: none; } /* Убираем исходную нумерацию у списка */
			ol { counter-reset: list1; } /* Инициируем счетчик */
			ol li:before {
				counter-increment: list1; /* Увеличиваем значение счетчика */
				content: counter(list1) ". "; /* Выводим число */
			}
			ol ol { counter-reset: list2; } /* Инициируем счетчик вложенного списка */
			ol ol li:before {
				counter-increment: list2; /* Увеличиваем значение счетчика вложенного списка */
				content: counter(list1) "." counter(list2) ". "; /* Выводим число */
			}
			...
			<body>
				<ol>
					<li>Пункт
						<ol>
							<li>Подпункт</li>
							<li>Подпункт</li>
							<li>Подпункт</li>
						</ol>
					</li>
					<li>Пункт
						<ol>
							<li>Подпункт</li>
							<li>Подпункт</li>
						</ol>
					</li>
				</ol>
			</body>
		<== end counter-reset

	quotes -> Устанавливает тип кавычек, который применяется в тексте документа.
		/* quotes: <Строка> <Строка> | none */
		q {
			quotes: "\00ab" "\00bb"; /* Кавычки в виде двойных угловых скобок */
		}

	Псевдоэлемент ::after -> Псевдоэлемент, который используется для вывода желаемого контента после элемента, к которому он добавляется.
		/* Селектор::before { content: "текст" } */
		p.new::after {
	      	content: "Новьё!"; /* Добавляемый текст */ 
	      	color: #333; /* Цвет текста */ 
	      	background-color: #fc0; /* Цвет фона */ 
	      	font-size: 90%; /* Размер шрифта */ 
	      	padding: 2px; /* Поля вокруг текста */ 
   		}
   		...
   		<p class="new"> ... </p>
		
	Псевдоэлемент ::before -> Применяется для отображения желаемого контента до элемента, к которому он добавляется.
		/* Селектор::before { content: "текст" } */
		li::before {
    		content: "¶ "; /* Добавляем желаемый символ перед элементом списка */ 
    	}
    	li {
    		list-style: none; /* Убираем исходные маркеры */ 
    	}
    	...
    	<ul>
    		<li>Альфа</li>
		    <li>Бета</li>
		    <li>Гамма</li>
	    </ul>

### ПОЛЯ И ОТСТУПЫ ###

	margin -> Устанавливает величину отступа от каждого края элемента.
		/* margin: [<размер> | <проценты> | auto] {1,4} */
		margin: 20%;  /* Отступы вокруг элемента */
		margin: -5px, 30px, 40px, 50px; /* Отступы вокруг элемента */
		margin: 5nm, 10nm; /* Отступы вокруг элемента */
		margin: auto; /* Отступы вокруг элемента, определяется браузером */

	margin-bottom -> Устанавливает величину отступа от нижнего края элемента.
		/* margin-bottom: <размер> | <проценты> | auto */
		margin-bottom: -7px; /* Отступ снизу */
		margin-bottom: auto; /* Отступы элемента, определяется браузером */

	margin-left -> Устанавливает величину отступа от левого края элемента.
		/* margin-left: <размер> | <проценты> | auto */
		margin-left: 20%; /* Отступ слева */
		margin-left: auto; /* Отступы элемента, определяется браузером */

	margin-right -> Устанавливает величину отступа от правого края элемента.
		/* margin-right: <размер> | <проценты> | auto */
		margin-right: 25%; /* Отступ справа */
		margin-right: auto; /* Отступы, определяется браузером */

	margin-top -> Устанавливает величину отступа от верхнего края элемента.
		/* margin-top: <размер> | <проценты> | auto */
		margin-top: 25%; /* Отступ сверху */
		margin-top: auto; /* Отступы, определяется браузером */

	padding -> Устанавливает значение полей вокруг содержимого элемента.
		/* padding: [<размер> | <проценты>] {1, 4} */
		padding: 20px 30px; /* Поля вокруг текста */
		padding: 10%; /* Поля вокруг текста */

	padding-bottom -> Устанавливает значение поля от нижнего края содержимого элемента.
		/* padding-bottom: [<размер> | <проценты>] */
		padding-bottom: 40px; /* Поле снизу от текста */
		padding-bottom: 10%; /* Поля снизу от текста*/

	padding-left -> Устанавливает значение поля от левого края содержимого элемента.
		/* padding-left: [<размер> | <проценты>] */
		padding-left: 40px; /* Поле слево от текста */
		padding-left: 10%; /* Поля слево от текста*/

	padding-right -> Устанавливает значение поля от правого края содержимого элемента.
		/* padding-right: [<размер> | <проценты>] */
		padding-right: 40px; /* Поле справа от текста */
		padding-right: 10%; /* Поля справа от текста*/

	padding-top -> Устанавливает значение поля от верхнего края содержимого элемента.
		/* padding-top: [<размер> | <проценты>] */
		padding-top: 40px; /* Поле сверху от текста */
		padding-top: 10%; /* Поля сверху от текста*/

### ПЕЧАТЬ ###

	@page -> Задаёт значение полей при печати документа.
		/* @page [ { :left | :right | :first } ] { Значения отступов } */
	    @page :first {
	    	margin: 1cm; /* Отступы для первой страницы */ 
	    }
	    @page :left {
	    	margin: 1cm 3cm 1cm 1.5cm; /* Отступы для всех левых страниц */ 
	    }
	    @page :right {
	    	margin: 1cm 3cm 1cm 1.5cm; /* Отступы для всех правых страниц */ 
	    }

	marks -> Отображает специальные метки на странице при печати документа, предназначенные для дальнейшего обрезания страницы или для ровного соединения нескольких листов между собой.
		/* marks: [ crop || cross ] | none */
		проблемы с отоброжениями в браузерах

	orphans -> Задаёт минимальное число строк текста, которое остается на предыдущей странице при печати документа.
		/* orphans: <число> */
		@media print {
			p {
		   		orphans: 3;
		   		widows: 3;
			}
		}

	page-break-after -> Добавляет разрыв страницы при печати документа после заданного элемента.
		/* page-break-after: always | auto | avoid | left | right */
		always - Всегда добавляет разрыв страницы перед элементом.
		auto -  Вставляет разрыв страницы при необходимости.
		avoid - Запрещает разрыв страницы перед элементом.
		left - Пропускает одну или две страницы перед элементом, чтобы следующая страница при печати была четной.
		right - Пропускает одну или две страницы перед элементом, чтобы следующая страница при печати была нечетной.

	    @media print {
		    .more {
		    	page-break-after: always;
		    } 
	    } 

	page-break-before -> Добавляет разрыв страницы при печати документа перед заданным элементом.
		/* page-break-before: always | auto | avoid | left | right */
		always - Всегда добавляет разрыв страницы перед элементом.
		auto - Вставляет разрыв страницы при необходимости.
		avoid - Запрещает разрыв страницы перед элементом.
		left - Пропускает одну или две страницы перед элементом, чтобы следующая страница при печати была четной.
		right - Пропускает одну или две страницы перед элементом, чтобы следующая страница при печати была нечетной.
	    
	    @media print {
	    	.more {
	    		page-break-before: always;
	    	} 
	    } 

	page-break-inside -> Разрешает или запрещает разрыв страницы внутри элемента при печати.
		/* page-break-inside: auto | avoid */
		auto - Вставляет разрыв страницы при необходимости.
		avoid - Запрещает разрыв страницы внутри элемента.

		@media print {
	    	p {
	     		page-break-inside: avoid; /* Запрещает разрыв страницы внутри элемента. */
	    	} 
	    } 

	widows -> Задаёт минимальное число строк текста, которое располагается на следующей странице при печати документа.
		/* widows: <число> */
		@media print {
		    p {
			     widows: 3;
			     orphans: 3;
		    }
		}

### ПОЗИЦИОНИРОВАНИЕ ###

	bottom -> Устанавливает положение нижнего края содержимого элемента без учета толщины рамок и отступов.
		/* bottom: <размер> | <проценты> | auto */
		bottom: 10px; /* Положение от нижнего края */

	left -> Устанавливает положение левого края содержимого элемента.
		/* left: <размер> | <проценты> | auto */
		left: 20px; /* Положение от левого края */

	position -> Устанавливает способ позиционирования элемента относительно окна браузера или других объектов на веб-странице.
		/* position: absolute | fixed | relative | static */
		position: relative; /* Относительное позиционирование */
		position: absolute; /* Абсолютное позиционирование */

	right -> Устанавливает положение правого края элемента.
		/* right: <размер> | <проценты> | auto */
		right: 10px; /* Положение от правого края */

	top -> Устанавливает положение верхнего края содержимого элемента.
		/* top: <размер> | <проценты> | auto */
		top: 50px; /* Положение от верхнего края */

	z-index -> Задаёт положение элементов по z-оси.
		/* z-index: <число> | auto */
		.card { position: relative; }
	   	.three { top: 50px; left: 55px; z-index: 5; }
	   	.seven { left: -120px; top: 25px; z-index: 2;}
	   	.ace { left: -295px; z-index: 1; }
	   	.card:hover { z-index: 10; }
	   	...
	   	<img src="image/3.png" alt="3" class="card three">
	    <img src="image/7.png" alt="7" class="card seven">
	    <img src="image/ace.png" alt="Туз" class="card ace">

### ПСЕВДОКЛАССЫ ###

	Псевдокласс :active -> Определяет стиль активного элемента. Состояние элемента, которое происходит между щелчком и отпусканием клавиши мыши.
		/* Селектор:active { ... } */
		a:active {
	    	color: #f00; /* Цвет активной ссылки */ 
	   	} 

	Псевдокласс :checked -> Применяется к элементам интерфейса, таким как переключатели (checkbox) и флажки (radio), когда они находятся в положение «включено».
		/* Селектор:checked { ... } */
		==> :checked Пример 1
		input:checked + span {
	    	background: #fc0;
	   	}
	   	...
	   	 <p><input type="checkbox" name="a1"><span>Windows 7</span><br>
	  	<input type="checkbox" name="a2"><span>Windows Vista</span><br>
	  	<input type="checkbox" name="a3"><span>Windows XP</span><br>
	  	<== end :checked Пример 1

		input[type="radio"]:checked { ... } /* Применить ко всем радиофложкам */

		input[type="checkbox"]:checked { ... } /* Стиль применяется только ко включенным переключателям. */

		option:checked { ... } /* Стиль применяется только к выбранным элементам списка. */

	Псевдокласс :default -> Применяет стиль к элементам форм, которые установлены по умолчанию в группе похожих элементов.
		/* Селектор:default { ... } */
		:default { 
	    	background-color: lime; 
	   	} 

	Псевдокласс :disabled -> Применяет стиль к заблокированным элементам форм.
		/* Селектор:disabled  { ... } */
		textarea:disabled { ... } /* Блокирует поле textarea */

	Псевдокласс :empty -> Представляет пустые элементы, т. е. те, которые не содержат дочерних элементов, текста или пробелов.
		/* Селектор:empty  { ...  } */
		==> :empty /* к примеру в пустом элементе <p></p> будет ставится красный кубик */
		span:empty {
		    background: red;
		    padding: 3px;
		    margin-left: 7px;
		    display: inline-block;
	   	} 
	   	<== end :empty

	Псевдокласс :enabled -> Используется для применения стиля к доступным (не заблокированным) элементам форм.
		/* Селектор:enabled { ... } */
		input:enabled { background: red; }

	Псевдокласс :first-child -> Применяет стилевое оформление к первому дочернему элементу своего родителя.
		/* Селектор:first-child { ... } */
		B:first-child { /* Стиль будет применятся к первым элементам <b> */
	    	color: red;
	    }

	Псевдокласс :first-of-type -> Задаёт правила стилей для первого элемента в списке дочерних элементов своего родителя.
		/* Селектор:first-of-type  {  ...  } */
		==> :first-of-type Начало
		table {
		    border-collapse: collapse; /* Убираем двойные границы */
		    width: 100%; /* Ширина таблицы */
		    border-spacing: 0; /* Расстояние между ячеек */
	    }
	    td { 
		    border: 1px solid #6A3E14; /* Параметры рамки */
		    padding: 4px; /* Поля в ячейках */
	    }
	    tr:first-of-type {
		    background: #808990; /* Цвет фона */
		    color: #fff; /* Цвет текст */
	    }
	    td:first-of-type {
	    	background: #CFD6D3; /* Цвет фона */
	    }
	    ...
	    <table>
		    <tr> 
		    	<td>&nbsp;</td><td>1998</td><td>1999</td><td>2000</td><td>2001</td>
		    	<td>2002</td><td>2003</td>
		    </tr>
		    <tr> 
		    	<td>Нефть</td>
		    	<td>3</td><td>22</td><td>34</td><td>62</td><td>74</td><td>57</td>
		    </tr>
	    	<tr>
		    	<td>Золото</td>
		    	<td>4</td><td>13</td><td>69</td><td>72</td><td>56</td><td>47</td>
		    </tr>
		    <tr>
		    	<td>Дерево</td>
		    	<td>4</td><td>7</td><td>73</td><td>79</td><td>34</td><td>86</td>
	    	</tr>
	    </table>
	  	<== конец :first-of-type

	Псевдокласс :focus -> Определяет стиль для элемента, получающего фокус.
		/* Селектор:focus { ... } */
		/* В hrome нужно добавить <a href="1.html" tabindex="1">Ссылка</a> */
		#enter .form-text:focus {
	    	background: #ffe; /* Цвет фона */
	    	border: 1px solid #29B0D9; /* Параметры рамки */
	   	}

	Псевдокласс :fullscreen -> Псевдокласс :fullscreen применяется к элементам, когда браузер находится в полноэкранном режиме.
		/* Селектор:fullscreen { ... } */
		#msg:-ms-fullscreen { background: #6088a5; }
  		#msg:-webkit-full-screen { background: #6088a5; }
  		#msg:-moz-full-screen { background: #6088a5; }

	Псевдокласс :hover -> Определяет стиль элемента при наведении на него курсора мыши, но при этом элемент еще не активирован.
		/* Селектор:hover { ... } */
		a:hover {
    		background: #786b59; /* Цвет фона под ссылкой */ 
    		color: #ffe; /* Цвет ссылки */ 
    	} 

	Псевдокласс :in-range -> Применяется к элементам форм, у которых введённое пользователем значение находится в заранее заданном диапазоне. Сам диапазон устанавливается с помощью атрибутов min и max, они, соответственно, задают минимальное и максимальное значение.
		/* Селектор:in-range { ... } */
		input:in-range {
   	 		background: #e2edc1; /* Число в указанных пределах */
    	}
    	...
    	<form><p><input type="number" min="1" max="10" value="1"></p></form>

	Псевдокласс :indeterminate -> (+s) Задаёт стиль для элементов форм, таким как флажки и переключатели, когда они находятся в неопределённом состоянии.
		/* Селектор:indeterminate { ... } */
		:indeterminate { 
			background: limegreen; 
		}
		...
		<script>document.getElementsByTagName("input")[0].indeterminate = true;</script>

	Псевдокласс :invalid -> Применяется к полям формы, содержимое которых не соответствует указанному типу.
		/* input:invalid { ... } */
		input:invalid {
    		background: #fdd; /* Красный цвет фона */
    	}
    	input:valid {
    		background: #dfd; /* Зелёный цвет фона */
    	}
    	...
    	<p><input type="url" required></p>

	Псевдокласс :lang -> Определяет язык, который используется в документе или его фрагменте.
		/* Селектор:lang(<язык>) { ... } */
		q:lang(en) {
    		quotes: "\201C" "\201D"; /* Вид кавычек для английского языка */ 
   		}
   		q:lang(fr), q:lang(ru) { /* Вид кавычек для русского и французского языка */ 
    		quotes: "\00AB" "\00BB"; 
   		}

	Псевдокласс :last-child -> Задаёт стилевое оформление последнего элемента своего родителя.
		/* Селектор:last-child { ... } */
		.block :last-child { 
   			background: #dda458 url(image/line.png) repeat-x; /* Параметры фона */
    		height: 5px; /* Высота блока */
    	}

	Псевдокласс :last-of-type -> Задаёт правила стилей для последнего элемента в списке дочерних элементов своего родителя.
		/* Селектор:last-of-type { ... } */
		p:last-of-type:after {
    		content: " ◄"; /* Добавляем символ в конце текста */
    		color: #c00000; /* Цвет символа */
   		}

	Псевдокласс :link -> Применяется к ссылкам, которые ещё не посещались пользователем.
		/* Селектор:link { ... } */
   		a:link {
    		color: #0000d0; /* Цвет ссылок */
   		}

	Псевдокласс :not -> Задаёт правила стилей для элементов, которые не содержат указанный селектор.
		/* Селектор:not(<Селектор>) { ... } */
		input:not([type="submit"]) { /* стиль применится ко всем элементам <input> за исключением того, в параметрах которого установлено type="submit" */
    		border: 1px solid #ccc;
    		padding: 3px;
  		}

	Псевдокласс :nth-last-child -> Используется для добавления стиля к элементам на основе нумерации в дереве элементов.
		/* Селектор:nth-last-child(odd | even | <число> | <выражение>) {...} */
		td:nth-last-child(2n+1) { /* Применить стиль к td с нумерацией 1, 3, 5, 7, 9. Все нечётные элементы, аналог значения odd.*/
    		background: #f0f0f0; /* Цвет фона */
   		}

	Псевдокласс :nth-last-of-type -> Используется для добавления стиля к элементам указанного типа на основе нумерации в дереве элементов.
		/* Селектор:nth-last-of-type(odd | even | <число> | <выражение>) {...} */
    	td:nth-last-of-type(2n+1) { /* Применить стиль к td с нумерацией 1, 3, 5, 7, 9. Все нечётные элементы, аналог значения odd.*/
    		background: #f0f0f0;
    	}

	Псевдокласс :nth-of-type -> Используется для добавления стиля к элементам указанного типа на основе нумерации в дереве элементов.
		/* Селектор:nth-of-type(odd | even | <число> | <выражение>) {...} */
		img:nth-of-type(2n+1) { float: left; } /* Нечётные картинки по левому краю */
   		img:nth-of-type(2n) { float: right; } /* Чётные по правому краю */

	Псевдокласс :only-child -> Применяется к дочерним элементам, только если он единственный у родителя. Аналогичен использованию :first-child:last-child или :nth-child(1):nth-last-child(1).
		/* Селектор:only-child { ... } */
		/*В Safari до версии 3.0 псевдокласс :only-child воспринимается как :first-child.*/

	Псевдокласс :only-of-type -> Применяется к дочерним элементам указанного типа, только если он единственный у родителя. Аналогичен использованию :first-of-type:last-of-type или :nth-of-type(1):nth-last-of-type(1).
		/* Селектор:only-of-type { ... } */
			img:only-of-type {
	    	border: 2px solid red; /* Параметры рамки */
	    }

	Псевдокласс :optional -> Применяет стилевые правила к полю формы, у которого не задан атрибут required. Он позволяет выделять поля обязательные к заполнению.
		/* input:optional { ... } */
		input:optional {
    		opacity: 0.5; /* Полупрозрачность */
   		}

	Псевдокласс :out-of-range -> Применяется к полям форм, у которых введённое пользователем значение выходит из заданного диапазона. Псевдокласс работает только для тех полей, где пользователь может сам ввести значение, несмотря на ограничения.
		/* Селектор:out-of-range { ... } */
		input:out-of-range {
    		background: #f9c3d2; /* Цвет фона */
    	}

	Псевдокласс :read-only -> Применяется к полям формы, у которых задан атрибут readonly. Такое поле не может быть модифицировано и получить фокус. 
		/* input:read-only { ... } */
		input:read-only {
    		opacity: 0.3; /* Полупрозрачность */
   		}

	Псевдокласс :read-write -> Применяется к полям формы, доступных для изменения. является противоположным по своему действию :read-only
		/* input:read-write { ... } */
	   	input:read-write {
    		border: 1px solid green;
    	}

	Псевдокласс :required -> Применяет стилевые правила к элементу input, у которого установлен атрибут required. Он позволяет выделять поля обязательные к заполнению.
		/* input:required  {  ...  } */
		input:required {
    		border: 1px solid red; /* Красная рамка для обязательных полей */
   		}

	Псевдокласс :target -> Применяется к целевому элементу, иными словами, к идентификатору, который указан в адресной строке браузера.
		/* Селектор:target { ... } */
		h2:target {
    		background: #fc0; /* Цвет фона */
    		padding: 3px; 
   		}
   		...
   		<li><a href="#h1">История 1</a></li>
    	<li><a href="#h2">История 2</a></li>
     	<h2 id="h1">...</h2>
  		<h2 id="h2">...</h2>

	Псевдокласс :valid -> Применяется к полям формы, содержимое которых проходит проверку в браузере на соответствие указанному типу. Противоположное :invalid.
		/* input:valid { ... } */
		input:invalid {
   			background: #fdd; /* Красный цвет фона */
   		}
   		input:valid {
    		background: #dfd; /* Зелёный цвет фона */
  		}	

	Псевдокласс :visited -> Применяется к ссылкам, уже посещённым пользователем, и задаёт для них стилевое оформление.
		/* a:visited  {  ...  } */
		a:visited {
    		color: #900060; /* Цвет посещённых ссылок */
   		}

### ПСЕВДОЭЛЕМЕНТЫ ###

	Псевдоэлемент(только для IE) ::-ms-browse -> Позволяет задать стиль кнопки «Обзор» при загрузке файлов через <input type="file">
		/* Селектор::-ms-browse { ... } */
		::-ms-browse {
	    	border-radius: 0 10px 10px 0; /* Радиус скругления */
		}

	Псевдоэлемент(только для IE) ::-ms-check -> Задаёт стиль переключателей (input type="radio") и флажков (input type="checkbox").
		/* Селектор::-ms-check { ... } */
		input[type="checkbox"]::-ms-check {
	    	background: #c00;
	    	color: #fff;
	   	}
		
	Псевдоэлемент(только для IE) ::-ms-clear -> Задаёт стиль кнопки для очистки текстового поля. Исходно эта кнопка не видна, она появляется в правой части поля только при вводе текста.
		/* Селектор::-ms-clear { ... } */
		#find::-ms-clear {
	    	background: #333;
	    	color: #fff;
	   	}
	
	Псевдоэлемент(только для IE) ::-ms-expand -> Задаёт стиль кнопки раскрытия списка, созданного с помощью тега <select> в браузере Internet Explorer.
		/* Селектор::-ms-expand { ... } */
		.expand::-ms-expand {
	    	color: #fff;
	   	}
		
	Псевдоэлемент(только для IE) ::-ms-fill -> Задаёт стиль индикатора прогресса в браузере Internet Explorer. Само значение индикатора и его положение меняется динамически посредством скриптов.
		/* Селектор::-ms-fill { ... } */
		progress::-ms-fill {
    		background: linear-gradient(to bottom, #fceabb, #fccd4d 50%, #f8b500 51%, #fbdf93);
   		}
		
	Псевдоэлемент(только для IE) ::-ms-reveal -> Задаёт стиль кнопки для просмотра пароля в поле <input type="password">.
		/* Селектор::-ms-reveal { ... } */
		input[type="password"]::-ms-reveal {
    		background: #c00;
    		color: #fff;
   		}
		
	Псевдоэлемент(только для IE) ::-ms-value -> Позволяет изменять стиль элементов формы, сделанных с помощью <input> или <select>.
		/* Селектор::-ms-value { ... } */
		input::-ms-value {
    		background-color: #fc0;
   		}
		
	Псевдоэлемент ::after -> Псевдоэлемент, который используется для вывода желаемого контента после элемента, к которому он добавляется.
		/* Селектор::after { content: "текст" } */
		p.new::after {
	      	content: "Новьё!"; /* Добавляемый текст */ 
	      	color: #333; /* Цвет текста */ 
	      	background-color: #fc0; /* Цвет фона */ 
	      	font-size: 90%; /* Размер шрифта */ 
	      	padding: 2px; /* Поля вокруг текста */ 
    	}
    	...
    	<p class="new"></p>
		
	Псевдоэлемент ::backdrop -> Обычно применяется для затемнения страницы, чтобы акцентировать внимание на фотографии или диалоговом окне, которые выводятся поверх такого затемнения. В настоящее время работает только с модальными окнами, созданными с помощью элемента <dialog>.
		/* Селектор::backdrop { ... } */
		dialog {
	    	width: 300px;
	   	}
	   	dialog::backdrop {
	    	background: rgba(0,0,0,0.7);
	   	}
		
	Псевдоэлемент ::before -> Применяется для отображения желаемого контента до элемента, к которому он добавляется.
		/* Селектор::before { content: "текст" } */
		li::before {
     		content: "¶ "; /* Добавляем желаемый символ перед элементом списка */ 
   		}
		li {
     		list-style: none; /* Убираем исходные маркеры */ 
   		}

	Псевдоэлемент ::first-letter -> Определяет стиль первого символа в тексте элемента, к которому добавляется.
		/* Селектор::first-letter { ... } */
		p {
    		font-family: Arial, Helvetica, sans-serif; /* Гарнитура шрифта основного текста */
    		font-size: 0.9em; /* Размер шрифта */
   		}
   		p::first-letter {
    		font-family: "Times New Roman", Times, serif; /* Гарнитура шрифта первой буквы */
    		font-size: 2em; /* Размер шрифта первого символа */
    		color: red; /* Красный цвет текста */
   		}
		
	Псевдоэлемент ::first-line -> Задаёт стиль первой строки форматированного текста.
		/* Селектор::first-line { ... } */
		p::first-line {
     		font-weight: bold; /* Жирное начертание */
    	}
		
	Псевдоэлемент ::placeholder -> Псевдоэлемент, с помощью которого задаётся стилевое оформление подсказывающего текста, созданного атрибутом placeholder.
		/* Селектор::placeholder { ... } */
   		input[type="search"]::-moz-placeholder {
    		color: #ffd595; /* Цвет подсказывающего текста */
   		}
	   	input[type="search"]::-webkit-input-placeholder { color: #ffd595; }
	   	input[type="search"]:-ms-input-placeholder { color: #ffd595; }
	   	input[type="search"]::-ms-input-placeholder { color: #ffd595; }
	   	input[type="search"]::placeholder { color: #ffd595; } 
		
	Псевдоэлемент ::selection -> Применяет стиль к выделенному пользователем фрагменту текста.
		/* Селектор::selection { ... } */
		p::selection {
    		color: #ff0; /* Цвет текста */
    		background: #000; /* Цвет фона */
   		}
		...
		<p>При выделении этого текста с вышепоказанным стилем, он изменит свой цвет.</p>

### РАЗМЕРЫ ###

	box-sizing -> Применяется для изменения алгоритма расчёта ширины и высоты элемента.
		/* box-sizing: content-box | border-box | padding-box */
		box-sizing: border-box; /* Ширина блока с полями */
		box-sizing: content-box /* Ширина блока не включают в себя значения отступов, полей и границ.*/
		box-sizing: padding-box /* Ширина блока без отступов (margin) и границ (border). */

	height -> Устанавливает высоту блочных или заменяемых элементов. Чтобы элементы друг на друга не налазили использовать overflow: auto к стилю элемента.
		/* height: <размер> | <проценты> | auto */
		height: 50px; /* Высота блока */

	max-height -> Устанавливает максимальную высоту элемента.
		/* max-height: <размер> | <проценты> | none */
		max-height: 80px; /* Максимальная высота */ 

	max-width -> Устанавливает максимальную ширину элемента.
		/* max-width: <размер> | <проценты> | none */
		max-width: 480px; /* Максимальная ширина страницы в пикселях */ 

	min-height -> Задает минимальную высоту элемента.
		/* min-height: <размер> | <проценты> */
		min-height: 80px; /* Минимальная высота */ 

	min-width -> Устанавливает минимальную ширину элемента.
		/* min-width: <размер> | <проценты> */
		min-width: 420px; /* Минимальная ширина контейнера */

	width -> Устанавливает ширину блочных или заменяемых элементов.
		/* width: <размер> | <проценты> | auto */
		 width: 300px; /* Ширина блока */
		 
### СПИСКИ ###

	list-style -> Универсальное свойство, позволяющее одновременно задать стиль маркера, его положение, а также изображение маркера. К элементам <dd>, <dt>, <li>, <ol> и <ul>, а также ко всем элементам, у которых указано display: list-item.
		/* list-style: list-style-type || list-style-position || list-style-image */
   		ul {
    		list-style: square outside; /* Квадратные размещаются за  пределами текстового блока */
   		}

	list-style-image -> Устанавливает адрес изображения, которое служит в качестве маркера списка. К элементам <dd>, <dt>, <li>, <ol> и <ul>, а также ко всем элементам, у которых указано display: list-item
		/* list-style-image: none | url('путь к файлу') */
   		ul {
   			list-style-image: url(image/mathematics.png); /* Путь к рисунку для установки маркера */
   		}
	
	list-style-position -> Определяет, как будет размещаться маркер относительно текста. К элементам <dd>, <dt>, <li>, <ol> и <ul>, а также ко всем элементам, у которых указано display: list-item
		/* list-style-position: inside | outside */
   		ul {
   			list-style-position: inside; /* Маркер обтекается текстом */
   		}
	
	list-style-type -> Изменяет вид маркера для каждого элемента списка. К элементам <li>, <ol> и <ul>, а также ко всем элементам, у которых указано display: list-item
		/* list-style-type: circle | disc | square | armenian | decimal | decimal-leading-zero | 
   		   georgian | lower-alpha | lower-greek | lower-latin | lower-roman | 
   		   upper-alpha | upper-latin | upper-roman | none */
   		
		Маркированный список  
		    circle - Маркер в виде кружка. 
		    disc - Маркер в виде точки.
		    square - Маркер в виде квадрата. 

		Нумерованный список
			armenian -  Традиционная армянская нумерация.
			decimal - Арабские числа (1, 2, 3, 4,...).
			decimal-leading-zero - Арабские числа с нулем впереди для цифр меньше десяти (01, 02, 03,...).
			georgian - Традиционная грузинская нумерация.
			lower-alpha - Строчные латинские буквы (a, b, c, d,...).
			lower-greek - Строчные греческие буквы (α, β, γ, δ,...).
			lower-latin - Это значение аналогично lower-alpha.
			lower-roman - Римские числа в нижнем регистре (i, ii, iii, iv, v,...).
			upper-alpha - Заглавные латинские буквы (A, B, C, D,...).
			upper-latin - Это значение аналогично upper-alpha.
			upper-roman - Римские числа в верхнем регистре (I, II, III, IV, V,...).
			none - Отменяет маркеры для списка.

   		ol {
    		list-style-type: upper-roman; /* Римские числа в верхнем регистре */
   		}

### ТАБЛИЦЫ ###

	border-collapse -> Устанавливает, как отображать границы вокруг ячеек таблицы.
		/* border-collapse: collapse | separate */
		border-collapse: collapse;  /* Линия между ячейками отображается только одна, также игнорируется значение атрибута cellspacing. */
		border-collapse: separate; /* Вокруг каждой ячейки отображается своя собственная рамка, в местах соприкосновения ячеек показываются сразу две линии.*/
	
	border-spacing -> Задаёт расстояние между границами ячеек в таблице.
		/* border-spacing: <размер> [<размер>] */
		border-spacing: 7px 11px; /* Расстояние между ячейками */
	
	caption-side -> Определяет положение заголовка таблицы, который задается с помощью тега <caption>.
		/* caption-side: top | bottom */
		table {
			width: 100%; /* Ширина таблицы */ 
			border-collapse: collapse; /* Убираем двойную рамку между ячеек */ 
		}
		td {
			border: 1px solid green; /* Параметры границы */ 
			padding: 5px; /* Поля в ячейках */ 
		}
		caption { 
			caption-side: bottom; /* Заголовок под таблицей */ 
		}
	
	empty-cells -> Задаёт отображение границ и фона в ячейке, если она пустая.
		/* empty-cells: show | hide */
		td {
	    	empty-cells: hide; /* Прячем пустые ячейки */
   		}
	
	table-layout -> Определяет, как браузер должен вычислять ширину ячеек таблицы, основываясь на ее содержимом.
		/* table-layout: auto | fixed */
		table {
	    	table-layout: fixed; /* Фиксированная ширина ячеек */
	    	width: 100%; /* Ширина таблицы */
	    }
	    .col1 { width: 160px; }
	    .coln { width: 60px; }
	    ...
	    <table border="1">
		    <col class="col1">
		    <col span="9" class="coln">
		    <tr> 
			    <td>&nbsp;</td>
			    <td>2012</td><td>2013</td><td>2014</td><td>2015</td>
			    <td>2016</td><td>2017</td><td>2018</td><td>2019</td>
			    <td>2020</td>
		    </tr>
		    <tr> 
			    <td>Нефть</td><td>5</td><td>7</td><td>2</td><td>8</td>
			    <td>3</td><td>34</td><td>62</td><td>74</td><td>57</td>
		    </tr>
		    <tr>
			    <td>Золото</td><td>3</td> <td>6</td><td>4</td><td>6</td>
			    <td>4</td><td>69</td><td>72</td><td>56</td><td>47</td>
		    </tr>
		    <tr>
			    <td>Дерево</td><td>5</td><td>8</td><td>3</td><td>4</td>
			    <td>7</td><td>73</td><td>79</td><td>34</td><td>86</td>
		    </tr>
	    </table> 

### ТЕКСТ И ШРИФТ ###

	@font-face -> Определяет настройки шрифтов, а также позволяет загрузить специфичный шрифт на компьютер пользователя.
		/* @font-face { свойства шрифта } */
		@font-face {
    		font-family: Pompadur; /* Имя шрифта */
    		src: url(font/pompadur.ttf); /* Путь к файлу со шрифтом */
   		}
	
	direction -> Свойство предназначено для сайтов, в которых имеет значение направление текста.
		/* direction: ltr | rtl */
		direction: ltr; /* с лева на право*/ 
		direction: rtl; /* с права на лево */ 
	
	font -> Универсальное свойство, которое позволяет одновременно задать несколько характеристик шрифта и текста.
		/* font-size: <абсолютный размер> | <относительный размер> | <размер> | <проценты> */
		/*<абсолютный размер> : (xx-small, x-small, small, medium, large, x-large, xx-large)
		  <относительный размер> : (larger, smaller)*/
		font-size: 250%; /* Размер шрифта в процентах */ 
		font-size: 11pt; /* Размер шрифта в пунктах */

	font-family -> Устанавливает семейство шрифта, которое будет использоваться для оформления текста содержимого. Заканчивают обычно простыми serif, sans-serif, cursive, fantasy или monospace.
		/* font-family: <шрифт> [, <шрифт>[, ...]] */
		serif — шрифты с засечками (антиквенные), типа Times;
    	sans-serif — рубленные шрифты (шрифты без засечек или гротески), типичный представитель Arial;
    	cursive — курсивные шрифты;
    	fantasy — декоративные шрифты;
    	monospace — моноширинные шрифты, ширина каждого символа в таком семействе одинакова (шрифт Courier).

    	font-family: Georgia, 'Times New Roman', Times, serif;

	font-kerning -> Управляет кернингом шрифта. Кернинг — это изменение интервала между определёнными сочетаниями букв для сохранения плотности букв в тексте. Это особенно важно для букв, у которых есть наклонные линии, вроде А, У, W, V.
		/* font-kerning: auto | normal | none */
		font-kerning: normal; /* К тексту применяется кернинг. */
	
	font-size -> Определяет размер шрифта элемента.
		/* font-size: <абсолютный размер> | <относительный размер> | <размер> | <проценты> */
		font-size: 11pt; /* Размер шрифта в пунктах */ 
	
	font-stretch -> Устанавливает узкое, нормальное или широкое начертание шрифта, что позволяет уплотнять или расширять текст.
		/* font-stretch:  ultra-condensed | extra-condensed | condensed | semi-condensed | 
  		   normal | semi-expanded | expanded | extra-expanded | ultra-expanded */

	   font-stretch: ultra-condensed;
	   font-stretch: extra-condensed;
	   font-stretch: condensed;
	   font-stretch: semi-condensed;
	   font-stretch: normal;
	   font-stretch: semi-expanded;
	   font-stretch: expanded;
	   font-stretch: extra-expanded;
	   font-stretch: ultra-expanded;
	
	font-style -> Определяет начертание шрифта — обычное, курсивное или наклонное.
		/* font-style: normal | italic | oblique */
		font-style: italic; /* Курсивное начертание */
		font-style: oblique /* Наклонный текст */

	font-variant -> Определяет, как нужно представлять строчные буквы — оставить их без модификаций или делать их все прописными уменьшенного размера.
		/* font-variant: normal | small-caps */
		font-variant: small-caps; /* Устанавливаем капитель */
	
	font-weight -> Устанавливает насыщенность шрифта.
		/* font-weight: bold|bolder|lighter|normal|100|200|300|400|500|600|700|800|900 */
		/* 100 — тонкое начертание;
	       200 — сверхсветлое;
	       300 — светлое;
	       400 — нормальное (аналогично normal);
	       500 — среднее;
	       600 — полужирное;
	       700 — жирное (аналогично bold);
	       800 — сверхжирное;
	       900 — тяжёлое. */

		font-weight: normal; /* Нормальное начертание */
		font-weight: 600; /* Полужирное начертание */

	hyphens -> Сообщает браузеру, как расставлять переносы слов в блоке текста. Словарь переносов хранится в браузере и подключается только при наличии атрибута lang с кодом языка.
		/* hyphens: none | manual | auto */
		<html lang="ru">
		...
		p {
    		-webkit-hyphens: auto;
    		-moz-hyphens: auto;
    		-ms-hyphens: auto;
   		}
	
	letter-spacing -> Определяет интервал между символами в пределах элемента.
		/* letter-spacing: <размер> | normal */
		em {
    		letter-spacing: 2px;
   		}
	
	line-height -> Устанавливает интерлиньяж (межстрочный интервал) текста, отсчёт ведётся от базовой линии шрифта.
		/* line-height: <множитель> | <размер> | <проценты> | normal */
		line-height: 70%;
		line-height: 1.5; /* Множитель 1.5 */
	
	tab-size -> Используется для изменения ширины отступа, заданного с помощью символа табуляции.
		/* tab-size: <число> */
		/* Значение по умолчанию - 8 */
		pre {
    		-o-tab-size: 3; /* Opera */
    		-moz-tab-size: 3; /* Firefox */
    		tab-size: 3;
   		}

	text-align -> Определяет горизонтальное выравнивание текста в пределах элемента.
		/*  */
		text-align: justify;
	
	text-align-last -> Задаёт выравнивание последней строки текста, когда свойство text-align установлено как justify.
		/* text-align-last: start | end | left | right | center | justify */
		/* start - Строка выравнивается по начальному краю блока.
		   end - Строка выравнивается по конечному краю блока.
		   left - Строка выравнивается по левому краю.
		   right - Строка выравнивается по правому краю.
		   center - Строка выравнивается по центру.
		   justify - Строка выравнивается по ширине. Если в последней строке только одно слово, то оно будет выравнено по левому краю.*/
		
		text-align-last: justify;  /* Вырввнить текст по ширине */

	text-decoration -> Добавляет оформление текста в виде его подчеркивания, перечеркивания, линии над текстом и мигания.
		/* text-decoration: [ blink || line-through || overline || underline ] | none */
		blink - Устанавливает мигающий текст. Рекомендуется в замен использовать анимацию.
		line-through - Создает перечеркнутый текст
		overline - Линия проходит над текстом
		underline - Устанавливает подчеркнутый текст
		none - Отменяет все эффекты

		a:hover { 
    		text-decoration: underline; /* Добавляем подчёркивание при наведении курсора мыши на ссылку */
   		}

	text-decoration-color -> Устанавливает цвет линии, которая добавляется через свойство <span class="attribute">text-decoration</span>.
		/* text-decoration-color: <цвет> */
		text-decoration-color: red;

	text-decoration-line -> Определяет, как должна добавляться декоративная линия к тексту — подчеркивание, перечеркивание, над текстом. Одновременно можно добавлять несколько линий, перечисляя значения через пробел.
		/* text-decoration-line: [ line-through || overline || underline ] | none */
		line-through - Создает перечеркнутый текст
		overline - Линия проходит над текстом
		underline - Устанавливает подчеркнутый текст
		none - Отменяет все эффекты

		text-decoration-line: underline; /* Подчёркивание*/

	text-decoration-style -> Устанавливает стиль декоративной линии, которая добавляется к тексту через свойство text-decoration или text-decoration-line.
		/* text-decoration-style: solid | double | dotted | dashed | wavy */
		solid - Одинарная линия.
		double - Двойная линия.
		dotted - Точечная линия.
		dashed - Пунктирная линия.
		wavy - Волнистая линия.

		text-decoration-style: wavy; /* Волнистая линия */
	
	text-indent -> Устанавливает величину отступа первой строки блока текста.
		/* text-indent: <размер> | <проценты> */
		p {
			text-indent: 1.5em; /* Отступ первой строки */
		}
	
	text-overflow -> Определяет параметры видимости текста в блоке, если текст целиком не помещается в заданную область.
		/* text-overflow: clip | ellipsis */
		text-overflow: ellipsis; /* Добавляем многоточие */
		text-overflow: clip; /* Текст обрезается по размеру области. */
	
	text-shadow -> Добавляет тень к тексту, а также устанавливает её параметры.
		/* text-shadow: none | <тень> [,<тень>]* */
		/* где <тень>: <сдвиг по x> <сдвиг по y> <радиус размытия> <цвет> */
		text-shadow: 1px 1px 2px black, 0 0 1em red; /* Параметры тени */

	text-transform -> Управляет преобразованием текста элемента в заглавные или прописные символы.
		/* text-transform: capitalize | lowercase | uppercase | none */
		capitalize - Первый символ каждого слова в предложении будет заглавным. Остальные символы свой вид не меняют.
		lowercase - Все символы текста становятся строчными (нижний регистр).
		uppercase - Все символы текста становятся прописными (верхний регистр).
		none - Не меняет регистр символов.

		text-transform: uppercase; /* Заглавные буквы */
		text-transform: capitalize; /* Каждое слово начинается с заглавной буквы */
	
	unicode-bidi -> Задаёт, как должен располагаться текст.
		/* unicode-bidi: normal | embed | bidi-override */
		normal - Браузер самостоятельно определяет, как ему следует отображать текст на основе символов юникода.
		embed - Переопределяет параметры текста, располагая его, как указано в свойстве direction.
		bidi-override - Аналогичен embed, но при этом также меняется порядок символов в тексте, подчиняясь значению direction.

  		.rtl p {
   			unicode-bidi: bidi-override; /* Меняются характеристики текста */
   			direction: rtl; /* Текст пишется справа налево */ 
  		}

	white-space -> Устанавливает, как отображать пробелы между словами.
		/* white-space: normal | nowrap | pre | pre-line | pre-wrap */
		normal - переносы строк устанавливаются автоматически.
		nowrap - Пробелы не учитываются, переносы строк в коде HTML игнорируются, весь текст отображается одной строкой
		pre - Текст показывается с учётом всех пробелов и переносов
		pre-line - В тексте пробелы не учитываются, текст автоматически переносится на следующую строку
		pre-wrap - В тексте сохраняются все пробелы и переносы. Если текст не уместится, переносится.

		white-space: pre; /* Учитываются все пробелы и переносы */
	
	word-break -> Свойство word-break указывает, как делать перенос строк внутри слов, которые не помещаются по ширине в заданную область.
		/* word-break: normal | break-all | keep-all */
		normal - Используются правила переноса строк по умолчанию.
		break-all - Перенос строк добавляется автоматически
		keep-all - Не разрешает перенос строк в словах на китайском, корейском или японском языке. Для остальных языков действует как normal.

		word-break: break-all; /* Перенос слов автоматически */

	word-spacing -> Устанавливает интервал между словами.
		/* word-spacing: <размер> | normal */
		word-spacing: 10px;
	
	word-wrap -> Указывает, переносить или нет длинные слова, которые не помещаются по ширине в заданную область.
		/* word-wrap: normal | break-word */
		normal - Строки не переносятся или переносятся
    	break-word - Перенос строк добавляется автоматически
		
		word-wrap: break-word; /* Перенос слов автоматически*/ 

	writing-mode -> Устанавливает направление текста на странице.
		/* writing-mode: lr-tb | rl-tb | tb-rl | bt-rl | tb-lr | bt-lr */
		writing-mode: lr-tb; /* Устанавливает направление текста слева направо. */
		writing-mode: rl-tb; /* Задает направление текста справа налево. */
		writing-mode: tb-rl; /* Текст располагается вертикально и выравнивается по верхнему и правому краю. */
		writing-mode: bt-rl; /* Текст располагается вертикально и выравнивается по нижнему и правому краю. */
		writing-mode: tb-lr; /* Текст располагается вертикально и выравнивается по верхнему и левому краю. */
		writing-mode: bt-lr; /* Текст располагается вертикально и выравнивается по нижнему и левому краю. */

	Псевдоэлемент ::first-letter -> Определяет стиль первого символа в тексте элемента, к которому добавляется.
		/* Селектор::first-letter { ... } */
		 p::first-letter {
    		font-family: "Times New Roman", Times, serif; /* Гарнитура шрифта первой буквы */
    		font-size: 2em; /* Размер шрифта первого символа */
    		color: red; /* Красный цвет текста */
   		}
	
	Псевдоэлемент ::first-line -> Задаёт стиль первой строки форматированного текста.
		/* Селектор::first-line { ... } */
		p::first-line {
     		color: red; /* Красный цвет текста */
     		font-style: italic; /* Курсивное начертание */
     		font-weight: bold; /* Жирное начертание */
    	}
	
	Псевдоэлемент ::selection -> Применяет стиль к выделенному пользователем фрагменту текста.
		/* Селектор::selection { ... } */
		p::selection { /* При выделении текста будет применятся стиль */
    		color: #ff0; /* Цвет текста */
    		background: #000; /* Цвет фона */
   		}

### ФЛЕКСЫ ###

	align-content -> Выравнивает строки внутри флекс-контейнера при наличии свободного пространства по вертикальной оси.
		/* align-content: flex-start|flex-end|center|space-between|space-around|stretch */
		flex-start - Строки располагаются в начале вертикальной оси в верхней части контейнера. Каждая следующая строка идёт вровень с предыдущей.
		center - Строки располагаются по центру контейнера.
		flex-end - Строки располагаются начиная с конца вертикальной оси в нижней части контейнера. Каждая предыдущая строка идёт вровень со следующей.
		space-between - Строки равномерно распределены в контейнере и расстояние между ними одинаково. Если 2 строки, одна сверху другая в самом низу.
		space-around - Строки равномерно распределяются таким образом, чтобы пространство между двумя соседними строками было одинаковым.
		stretch - Строки равномерно растягиваются, заполняя свободное пространство.

		.flex-container {
	    	width: 70px;
	    	height: 240px;
	    	border: 1px solid #333;
	    	padding: 10px;
	    	display: flex;
	    	flex-wrap: wrap;
	    	align-content: center;
   		}

	align-items -> Выравнивает флекс-элементы по вертикальной оси внутри контейнера.
		/* align-items: flex-start | flex-end | center | baseline | stretch */
		flex-start - Флексы выравниваются по верхнему краю контейнера.
		center - Флексы выравниваются по центральной оси
		flex-end - Флексы выравниваются по нижнему краю контейнера.
		stretch - Флексы растягиваются таким образом, чтобы занять всё вертикальное пространство контейнера.
		baseline - Флексы выравниваются по их базовой линии.

		.flex-container {
		    display: flex;
		    align-items: stretch; /* Растягиваем по вертикали */
	   	}
	   	.flex-item {
		    margin-left: 1rem; /* Расстояние между блоками */
		    padding: 10px; /* Поля вокруг текста */
		    width: 33.333%; /* Ширина блоков */
	   	}
	   	.flex-item:first-child { margin-left: 0; }
	   	.item1 { background: #F0BA7D; }
	   	.item2 { background: #CAE2AA; }
	   	.item3 { background: #A6C0C9; }
	   	...
		<div class="flex-container">
		   <div class="flex-item item1"></div>
		   <div class="flex-item item2"></div>
		   <div class="flex-item item3"></div>
		</div>

	align-self -> Задаёт выравнивание отдельного элемента в контейнере по поперечной оси.
		/* align-self: flex-start | flex-end | center | baseline | stretch */
		flex-start - Элемент выравнивается по верхнему краю контейнера.
		flex-end - Элемент выравнивается по нижнему краю контейнера.
		center - Элемент выравнивается по центральной оси.
		baseline - Элемент выравнивается по базовой линии текста.
		stretch - Элемент растягивается таким образом, чтобы занять всё вертикальное пространство контейнера.
		
		.flex-item:hover { 
     		align-self: stretch; /* Растягиваем при наведении */
   		}

	flex-basis -> Свойство flex-basis определяет основу флекса, которая является начальным размером элемента.
		/* flex-basis: auto | <ширина> */
		.flex-container {
		    display: flex; /* Флексы */
		    height: 300px; /* Высота */
		    color: #fff; /* Белый цвет текста */
		    font-size: 2.6em; /* Размер шрифта */
		    flex-flow: column wrap; /* Располагаем в виде колонок */
	   	}
	   	.flex-item {
		    display: flex; /* Флексы */
		    align-items: center; /* Выравнивание текста по вертикали */
		    justify-content: center; /* Выравнивание текста по горизонтали */
	   	}
	   	.one {
		    background: #508694; /* Цвет фона */
		    margin-right: 10px; /* Отступ справа */
		    flex-basis: 100%;
		    order: 1; /* Первый блок */
	  	}
	   	.two {
		    background: #BB844C; /* Цвет фона */
		    margin-bottom: 10px; /* Отступ снизу */
		    flex: 1 1 0;
		    order: 2; /* Второй блок */
	   	}
	   	.three {
		    background: #929D79; /* Цвет фона */
		    flex: 1 1 0;
		    order: 3; /* Третий блок */
	   	}
	   	...
		<div class="flex-container">
		   	<div class="flex-item one">Первый</div>
		   	<div class="flex-item two">Второй</div>
		   	<div class="flex-item three">Третий</div>
	  	</div>

	flex-direction -> Свойство flex-direction определяет, как флексы располагаются в контейнере относительно основных осей и их направление.
		/* flex-direction: row | row-reverse | column | column-reverse */
		row - Главная ось направлена так же, как и ориентация текста, по умолчанию слева направо. Если значение dir задано как rtl, то направление оси идёт справа налево.
		row-reverse - Похоже на значение row, но меняются местами начальная и конечная точки и главная ось направлена справа налево. Если значение dir задано как rtl, то направление оси идёт слева направо.
		column - Главная ось располагается вертикально и направлена сверху вниз.
		column-reverse - Главная ось располагается вертикально, но меняется положение начальной и конечной точек и ось направлена снизу вверх.

		flex-direction: row-reverse;
		
### ФОРМАТИРОВАНИЕ ###

	all -> Универсальное свойство, которое сбрасывает все значения свойств в исходные или наследуемые, за исключением свойств direction и unicode-bidi.
		/* all: initial | inherit | unset */
		initial - Изменить все свойства, применяемые к элементу, на исходные значения.
		inherit - Изменить все свойства, применяемые к элементу, на значения, наследуемые у родителя.
		unset - Если свойство наследуется, то его значение принимается как inherit, в противном случае оно принимается как initial.
		
		p { 
		    text-align: justify; /* Выравнивание по ширине */
		    color: green; /* Зелёный цвет текста */
	   	}
	   	h1 {
		    color: red; /* Красный цвет заголовка */
		    font: 16px Arial, sans-serif; /* Параметры шрифта */
	   	}
	   	p, h1 {
	    	all: unset; /* Сброс стилей */
	   	}

	clear -> Устанавливает, с какой стороны элемента запрещено его обтекание другими элементами.
		/* clear: none | left | right | both */
		none - Отменяет действие свойства clear, при этом обтекание элемента происходит, как задано с помощью свойства float или других настроек.
		both -  Отменяет обтекание элемента одновременно с правого и левого края. Это значение рекомендуется устанавливать, когда требуется снять обтекание элемента, но неизвестно точно с какой стороны.
		left - Отменяет обтекание с левого края элемента. При этом все другие элементы на этой стороне будут опущены вниз, и располагаться под текущим элементом.
		right - Отменяет обтекание с правой стороны элемента.

		clear: both; /* Отменяет обтекание с правой и с левой стороны */
	
	clip -> Определяет область позиционированного элемента, в которой будет показано его содержимое.
		/* clip: rect(Y1, X1, Y2, X2) | auto */
		clip: rect(auto, 220px, auto, 0);
	
	display -> Многоцелевое свойство, которое определяет, как элемент должен быть показан в документе.
		/* display: block | inline | inline-block | inline-table | list-item | none | 
		   run-in | table | table-caption | table-cell | table-column-group | table-column | 
		   table-footer-group | table-header-group | table-row | table-row-group */
		block - Элемент показывается как блочный.
		inline - Элемент отображается как строчный. Использование блочных элементов, таких как <div> и <p>, автоматически создаёт перенос и показывает их содержимое с новой строки.
		inline-block - Это значение генерирует блочный элемент, который обтекается другими элементами веб-страницы подобно строчному элементу.
		inline-table - Определяет, что элемент является таблицей как при использовании <table>, но при этом таблица является строчным элементом
		list-item - Элемент выводится как блочный и добавляется маркер списка.
		none - Временно удаляет элемент из документа. Занимаемое им место не резервируется. Вернуть можно с помощью скриптов, после чего переформатируется.
		run-in - Устанавливает элемент как блочный или строчный в зависимости от контекста.
		table - Определяет, что элемент является блочной таблицей подобно использованию <table>.
		table-caption - Задаёт заголовок таблицы подобно применению <caption>.
		table-cell - Указывает, что элемент представляет собой ячейку таблицы (<dd> или <th>).
		table-column - Назначает элемент колонкой таблицы, словно был добавлен <col>.
		table-column-group - Определяет, что элемент является группой одной или более колонок таблицы, как при использовании <colgroup>.
		table-footer-group - Используется для хранения одной или нескольких строк ячеек, которые отображаются в самом низу таблицы. По своему действию сходно с работой <tfoot>.
		table-header-group - Элемент предназначен для хранения одной или нескольких строк ячеек, которые представлены вверху таблицы. По своему действию сходно с работой <thead>.
		table-row - Элемент отображается как строка таблицы (<tr>).
		table-row-group - Создаёт структурный блок, состоящий из нескольких строк таблицы аналогично действию <tbody>.

		display: inline; /* Устанавливаем как строчный элемент */

	float -> Определяет, по какой стороне будет выравниваться элемент, при этом остальные элементы будут обтекать его с других сторон.
		/* float: left | right | none */
		left - Выравнивает элемент по левому краю, все элементы обтекают его с права.
		right - Выравнивает элемент по правому краю, все эелементы обтекают его с лева.
		none - Обтекание элемента не задаётся.
		
		float: left; /* Обтекание блока по правому краю */

	overflow -> Управляет отображением содержания элемента, если оно целиком не помещается в область заданных размеров.
		/* overflow: auto | hidden | scroll | visible */
		visible - Отображается все содержание элемента, даже за пределами установленной высоты и ширины.
		hidden - Отображается только область внутри элемента, остальное будет скрыто.
		scroll - Всегда добавляются полосы прокрутки.
		auto - Полосы прокрутки добавляются только при необходимости.
		
		overflow: scroll; /* Добавляем полосы прокрутки */

	overflow-x -> Управляет отображением содержания блочного элемента по горизонтали.
		/* overflow-x: auto | hidden | scroll | visible */
		overflow-x: scroll; /* Добавляем полосу прокрутки */
	
	overflow-y -> Управляет отображением содержания блочного элемента по вертикали, если контент целиком не помещается и выходит за область сверху или снизу от блока.
		/* overflow-y: auto | hidden | scroll | visible */
		overflow-y: hidden; /* Убираем вертикальную полосу прокрутки */
	
	vertical-align -> Выравнивает элемент по вертикали относительно своего родителя, окружающего текста или ячейки таблицы.
		/* vertical-align: baseline|bottom|middle|sub|super|text-bottom|text-top|top| <размер> | <проценты> */
		baseline - (также прим в табл) По базовой линии родителя иначе же по нижней границе элемента.
		bottom - (также прим в табл) Выравнивает основание текущего элемента по нижней части элемента строки, расположенного ниже всех.
		middle - (также прим в табл) Выравнивание средней точки элемента по базовой линии родителя плюс половина высоты родительского элемента.
		sub - В виде нижнего индекса.
		super - В виде верхнего индекса.
		text-bottom - Нижняя граница элемента выравнивается по самому нижнему краю текущей строки.
		text-top - Верхняя граница элемента выравнивается по самому высокому текстовому элементу текущей строки.
		top - (также прим в табл) Выравнивание верхнего края элемента по верху самого высокого элемента строки.
			
		vertical-align: sub; /* Выравнить в виде нижнего индекса */

	visibility -> Предназначен для отображения или скрытия элемента.
		/* visibility: visible | hidden | collapse */
		visible - Отображает элемент как видимый.
		hidden - Элемент становится полностью прозрачным и продлжает участвовать в формировании страницы.
		collapse - Иными словами, заданные строки и колонки убираются, а таблица перестраивается по новой. Это значение не поддерживается браузером Internet Explorer.

		visibility: visible; /* Отобразить элемент как видимый */

### ФОРМЫ ###

	Псевдокласс :checked -> Применяется к элементам интерфейса, таким как переключатели (checkbox) и флажки (radio), когда они находятся в положение «включено».
		/* Селектор:checked { ... } */
		==> :checked Пример 1
		input:checked + span {
	    	background: #fc0;
	   	}
	   	...
	   	 <p><input type="checkbox" name="a1"><span>Windows 7</span><br>
	  	<input type="checkbox" name="a2"><span>Windows Vista</span><br>
	  	<input type="checkbox" name="a3"><span>Windows XP</span><br>
	  	<== end :checked Пример 1

		input[type="radio"]:checked { ... } /* Применить ко всем радиофложкам */

		input[type="checkbox"]:checked { ... } /* Стиль применяется только ко включенным переключателям. */

		option:checked { ... } /* Стиль применяется только к выбранным элементам списка. */

	Псевдокласс :default -> Применяет стиль к элементам форм, которые установлены по умолчанию в группе похожих элементов.
		/* Селектор:default { ... } */
		:default { 
	    	background-color: lime; 
	   	} 

	Псевдокласс :disabled -> Применяет стиль к заблокированным элементам форм.
		/* Селектор:disabled  { ... } */
		textarea:disabled { ... } /* Блокирует поле textarea */

	Псевдокласс :enabled -> Используется для применения стиля к доступным (не заблокированным) элементам форм.
		/* Селектор:enabled { ... } */
		input:enabled { background: red; }

	Псевдокласс :in-range -> Применяется к элементам форм, у которых введённое пользователем значение находится в заранее заданном диапазоне. Сам диапазон устанавливается с помощью атрибутов min и max, они, соответственно, задают минимальное и максимальное значение.
		/* Селектор:in-range { ... } */
		input:in-range {
   	 		background: #e2edc1; /* Число в указанных пределах */
    	}
    	...
    	<form><p><input type="number" min="1" max="10" value="1"></p></form>

	Псевдокласс :invalid -> Применяется к полям формы, содержимое которых не соответствует указанному типу.
		/* input:invalid { ... } */
		input:invalid {
    		background: #fdd; /* Красный цвет фона */
    	}
    	input:valid {
    		background: #dfd; /* Зелёный цвет фона */
    	}
    	...
    	<p><input type="url" required></p>

	Псевдокласс :optional -> Применяет стилевые правила к полю формы, у которого не задан атрибут required. Он позволяет выделять поля обязательные к заполнению.
		/* input:optional { ... } */
		input:optional {
    		opacity: 0.5; /* Полупрозрачность */
   		}

	Псевдокласс :out-of-range -> Применяется к полям форм, у которых введённое пользователем значение выходит из заданного диапазона. Псевдокласс работает только для тех полей, где пользователь может сам ввести значение, несмотря на ограничения.
		/* Селектор:out-of-range { ... } */
		input:out-of-range {
    		background: #f9c3d2; /* Цвет фона */
    	}

	Псевдокласс :read-only -> Применяется к полям формы, у которых задан атрибут readonly. Такое поле не может быть модифицировано и получить фокус. 
		/* input:read-only { ... } */
		input:read-only {
    		opacity: 0.3; /* Полупрозрачность */
   		}

	Псевдокласс :read-write -> Применяется к полям формы, доступных для изменения. является противоположным по своему действию :read-only
		/* input:read-write { ... } */
	   	input:read-write {
    		border: 1px solid green;
    	}

	Псевдокласс :required -> Применяет стилевые правила к элементу input, у которого установлен атрибут required. Он позволяет выделять поля обязательные к заполнению.
		/* input:required  {  ...  } */
		input:required {
    		border: 1px solid red; /* Красная рамка для обязательных полей */
   		}

	Псевдокласс :valid -> Применяется к полям формы, содержимое которых проходит проверку в браузере на соответствие указанному типу. Противоположное :invalid.
		/* input:valid { ... } */
		input:invalid {
   			background: #fdd; /* Красный цвет фона */
   		}
   		input:valid {
    		background: #dfd; /* Зелёный цвет фона */
  		}	

	Псевдоэлемент(только для IE) ::-ms-browse -> Позволяет задать стиль кнопки «Обзор» при загрузке файлов через <input type="file">
		/* Селектор::-ms-browse { ... } */
		::-ms-browse {
	    	border-radius: 0 10px 10px 0; /* Радиус скругления */
		}

	Псевдоэлемент(только для IE) ::-ms-check -> Задаёт стиль переключателей (input type="radio") и флажков (input type="checkbox").
		/* Селектор::-ms-check { ... } */
		input[type="checkbox"]::-ms-check {
	    	background: #c00;
	    	color: #fff;
	   	}
		
	Псевдоэлемент(только для IE) ::-ms-clear -> Задаёт стиль кнопки для очистки текстового поля. Исходно эта кнопка не видна, она появляется в правой части поля только при вводе текста.
		/* Селектор::-ms-clear { ... } */
		#find::-ms-clear {
	    	background: #333;
	    	color: #fff;
	   	}
	
	Псевдоэлемент(только для IE) ::-ms-expand -> Задаёт стиль кнопки раскрытия списка, созданного с помощью тега <select> в браузере Internet Explorer.
		/* Селектор::-ms-expand { ... } */
		.expand::-ms-expand {
	    	color: #fff;
	   	}
		
	Псевдоэлемент(только для IE) ::-ms-fill -> Задаёт стиль индикатора прогресса в браузере Internet Explorer. Само значение индикатора и его положение меняется динамически посредством скриптов.
		/* Селектор::-ms-fill { ... } */
		progress::-ms-fill {
    		background: linear-gradient(to bottom, #fceabb, #fccd4d 50%, #f8b500 51%, #fbdf93);
   		}
		
	Псевдоэлемент(только для IE) ::-ms-reveal -> Задаёт стиль кнопки для просмотра пароля в поле <input type="password">.
		/* Селектор::-ms-reveal { ... } */
		input[type="password"]::-ms-reveal {
    		background: #c00;
    		color: #fff;
   		}
		
	Псевдоэлемент(только для IE) ::-ms-value -> Позволяет изменять стиль элементов формы, сделанных с помощью <input> или <select>.
		/* Селектор::-ms-value { ... } */
		input::-ms-value {
    		background-color: #fc0;
   		}
		

### ЦВЕТ И ФОН ###

	background -> Универсальное свойство позволяет установить одновременно до пяти характеристик фона.
		/* background: [<фон>, ]* <последний_фон> */
		/* Значение по умолчанию	transparent || none || repeat || scroll || 0% 0%.
		   <фон> = [background-attachment || background-image || background-position || background-repeat]
		   <последний_фон> = [background-attachment || background-color || background-image || background-position || background-repeat] */

		background: url(image/hand.png) repeat-y #fc0; /* Пример 1. Цвет фона, путь к фоновому изображению и повторение фона по вертикали */

		==> background начало /* Пример 2. Установка сразу несколько фонов */
		div {
			background:url(smiley.gif) top left no-repeat,
			url(sqorange.gif) bottom left no-repeat,
			url(sqgreen.gif) bottom right no-repeat;
		} 
		<== конец background

	background-clip -> Определяет, как цвет фона или фоновая картинка должна выводиться под границами.
		/* background-clip: [padding-box | border-box | content-box]
   		   [, [padding-box | border-box | content-box]] */
		padding-box - Фон отображается внутри границ.
		border-box - Фон выводится под границами.
		content-box - Фон отображается только внутри контента.

		background-clip: border-box; /* Фон под рамкой */   
		
	background-color -> Определяет цвет фона элемента.
		/* background-color: <цвет> | transparent */
		transparent - Устанавливает прозрачный фон.

		h1 {
    		background-color: RGB(249, 201, 16); /* Цвет фона под заголовком */
   		}
		
	background-image -> Устанавливает фоновое изображение для элемента.
		/* background-image: url(путь к файлу) | none[, url(путь к файлу) | none]* */
		body {
    		background-image: url(image/bg.jpg); /* Путь к фоновому изображению */
    		background-color: #c7b39b; /* Цвет фона */
  	 	}
			
	background-origin -> Определяет область позиционирования фонового рисунка.
		/* background-origin: [padding-box | border-box | content-box] 
  		   [, [padding-box | border-box | content-box]]* */

  		padding-box - Фон позиционируется относительно края элемента с учетом толщины границы.
		border-box - Фон позиционируется относительно границы, при этом линия границы может перекрывать изображение.
		content-box - Фон позиционируется относительно содержимого элемента.

		background-origin: content-box; /* фон относительно границы */
			
	background-position -> Задаёт начальное положение фонового изображения, установленного с помощью свойства background-image.
		/* background-position: <позиция>[, <позиция>]* */
		/* <позиция> = [left | center | right | <проценты> | <размер>] || [top | center | bottom | <проценты> | <размер>] */

		body {
			background-image: url(image/pattern-left.png), url(image/pattern-right.png);
	    	background-repeat: repeat-y, repeat-y;
	    	background-position: left, right;
		}	

	background-repeat -> Определяет, как будет повторяться фоновое изображение, установленное с помощью свойства background-image.
		/* background-repeat: <повторение> [ , <повторение> ]*  */
		/* <повторение> = repeat-x | repeat-y | [repeat | space | round | no-repeat]{1,2} */
		no-repeat - Устанавливает одно фоновое изображение в элементе без его повторений
		repeat - Фоновое изображение повторяется по горизонтали и вертикали. Аналогично repeat repeat.
		repeat-x - Фоновый рисунок повторяется только по горизонтали. Аналогично repeat no-repeat.
		repeat-y - Фоновый рисунок повторяется только по вертикали. Аналогично no-repeat repeat.
		space - Изображение повторяется столько раз, чтобы полностью заполнить область; если это не удаётся, между картинками добавляется пустое пространство.
		round - Изображение повторяется так, чтобы в области поместилось целое число рисунков; если это не удаётся сделать, то фоновые рисунки масштабируются.

		background-repeat: repeat-x; /* Повторяем фон по горизонтали */

	background-size -> Масштабирует фоновое изображение согласно заданным размерам.
		/* background-size: [ <размер> | <проценты> | auto ]{1,2} | cover | contain  */
		cover - Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.
		contain - Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.
		
		background-size: cover; /* Масштабируем фон */

	color -> Определяет цвет текста элемента.
		/* color: <цвет> | transparent */

		color: #f15a22; /* Цвет текста */
		color: rgb(0, 113, 181); /* Цвет текста */
			
	linear-gradient() -> Создаёт линейный градиент — плавный переход от одного цвета к другому.
		/* background-image: linear-gradient([<угол> | to <позиция> ,] <цвет> [, <цвет>]*); */
		.gradient {
    		background: #fefcea; /* Для старых браузеров */
    		background: linear-gradient(to top, #fefcea, #f1da36);
    		padding: 10px;
    		border: 1px solid #333;
   		}
	
	radial-gradient() -> Добавляет радиальный градиент к фону элемента.
		/* background-image: radial-gradient([ circle || <радиус> ] [ at <позиция> ]? ,
           | [ ellipse || [<радиус> | <проценты> ]{2}] [ at <позиция> ]? ,
           | [ [ circle | ellipse ] || <размер> ] [ at <позиция> ]? ,
           | at <позиция> ,
           <цвет> [ , <цвет> ]*) */

		circle - Радиальный градиент круглой формы.
		ellipse - Создаёт градиент эллиптической формы. Эта форма установлена по умолчанию.
		<радиус> - Радиус градиента в доступных для CSS единицах. Одно значение указывает радиус круга, два значения — радиус эллипса по оси x и его же радиус по оси y. Если радиус явно не указан, градиент будет заполнять собой весь фон элемента.
		<позиция> - Задаёт начальную точку откуда исходит градиент. Позиция точки пишется аналогично значениям свойства background-position

   		div {
		    background: #ffb60f;
		    background: radial-gradient(circle at 80px 40px, #f9eec7, #ffb60f, #ffb60f);
		    padding: 20px;
   		}

	repeating-linear-gradient() -> Создаёт повторяющийся линейный градиент.
		/* background-image: repeating-linear-gradient([<угол> | to <позиция> ,] <цвет> [, <цвет>]*); */

		body {
    		background: repeating-linear-gradient(-45deg, #fff, #fff 25px, #e2edc1 25px, #e2edc1 50px) fixed;
   		}
			
	repeating-radial-gradient() -> По своему действию похож на радиальный градиент, который делается функцией radial-gradient(), но бесконечно повторяются во всех направлениях.
		/* background-image: repeating-radial-gradient([ circle || <радиус> ] [ at <позиция> ]? ,
           | [ ellipse || [<радиус> | <проценты> ]{2}] [ at <позиция> ]? ,
   		   | [ [ circle | ellipse ] || <размер> ] [ at <позиция> ]? ,
      	   | at <позиция> ,
           <цвет> [ , <цвет> ]*) */

		circle - Радиальный градиент круглой формы.
		ellipse - Создаёт градиент эллиптической формы. Эта форма установлена по умолчанию.
		<радиус> - Радиус градиента в доступных для CSS единицах. Одно значение указывает радиус круга, два значения — радиус эллипса по оси x и его же радиус по оси y. Если радиус явно не указан, градиент будет заполнять собой весь фон элемента.
		<позиция> - Задаёт начальную точку откуда исходит градиент. Позиция точки пишется аналогично значениям свойства background-position

    	body {
    		background-image: repeating-radial-gradient(circle at 200px 100px, #fff, #fff 25px, #fce3ee 25px, #fce3ee 50px);
    		background-attachment: fixed;
    	}


---------------- Использование атрибутов
	<style>
	  .order[order-state="new"] {
	    color: green;
	  }

	  .order[order-state="pending"] {
	    color: blue;
	  }

	  .order[order-state="canceled"] {
	    color: red;
	  }
	</style>

	<div class="order" order-state="new">
	  Новый заказ.
	</div>

	<div class="order" order-state="pending">
	  Ожидающий заказ.
	</div>

	<div class="order" order-state="canceled">
	  Заказ отменён.
	</div>

------------------ Полифил на CSS, hidden
<style>
  [hidden] { display: none }
</style>
<div hidden>С атрибутом hidden</div>